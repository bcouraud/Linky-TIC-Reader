{"version":3,"file":"influxdb.min.js","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/util/utf8Length.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/QueryApiImpl.ts","../src/results/ObservableQuery.ts","../src/results/AnnotatedCSVResponseImpl.ts","../src/InfluxDB.ts","../src/results/stringToLines.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare class TextDecoder {\n  constructor(encoding: string)\n  decode(chunk: Uint8Array): string\n}\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e as Error)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * FluxTableColumn describes {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n\n  /**\n   * Get returns a JavaScript object of this column in the supplied result row, using default deserializers.\n   * @param row - a data row\n   * @returns column value\n   */\n  get: (row: string[]) => any\n}\n\nconst identity = (x: string): any => x\n\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n  public get(row: string[]): any {\n    let val = row[this.index]\n    if ((val === '' || val === undefined) && this.defaultValue) {\n      val = this.defaultValue\n    }\n    return (typeSerializers[this.dataType] ?? identity)(val)\n  }\n}\nexport const UNKNOWN_COLUMN: FluxTableColumn = Object.freeze({\n  label: '',\n  dataType: '',\n  group: false,\n  defaultValue: '',\n  index: Number.MAX_SAFE_INTEGER,\n  get: () => undefined,\n})\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {\n  FluxTableColumn,\n  UNKNOWN_COLUMN,\n  typeSerializers,\n} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @param errorOnMissingColumn - throw error on missing column (by default), return UNKNOWN_COLUMN when false\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string, errorOnMissingColumn?: boolean): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied row with the help of column descriptors.\n   * @param row - a row with data for each column\n   */\n  toObject(row: string[]): {[key: string]: any}\n\n  /**\n   * Gets column values out of the supplied row.\n   * @param row - a row with data for each column\n   * @param column - column name\n   * @returns column value, undefined for unknown column\n   */\n  get(row: string[], column: string): any\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string, errorOnMissingColumn = true): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    if (errorOnMissingColumn) {\n      throw new IllegalArgumentError(`Column ${label} not found!`)\n    }\n    return UNKNOWN_COLUMN\n  }\n  toObject(row: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < row.length; i++) {\n      const column = this.columns[i]\n      acc[column.label] = column.get(row)\n    }\n    return acc\n  }\n  get(row: string[], column: string): any {\n    return this.column(column, false).get(row)\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n  /**\n   * Default HTTP headers to send with every request.\n   */\n  headers?: Record<string, string>\n  /**\n   * Full HTTP web proxy URL including schema, for example http://your-proxy:8080.\n   */\n  proxyUrl?: string\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempt - count of already failed attempts to write the lines (1 ... maxRetries+1)\n   * @param expires - expiration time for the lines to be retried in millis since epoch\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempt: number,\n    expires: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max count of retries after the first write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records/lines to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n  /** max size of a batch in bytes */\n  maxBatchBytes: number\n  /** InfluxDB Enterprise write consistency as explained in https://docs.influxdata.com/enterprise_influxdb/v1.9/concepts/clustering/#write-consistency */\n  consistency?: 'any' | 'one' | 'quorum' | 'all'\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  maxBatchBytes: 50_000_000, // default max batch size in the cloud\n  flushInterval: 60000,\n  writeFailed: function () {},\n  writeSuccess: function () {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function (value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts Point's timestamp to a string.\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = Number(value)\n  if (!isFinite(val)) {\n    if (typeof value === 'number') {\n      return `float(v: \"${val}\")`\n    }\n    throw new Error(`not a flux float: ${value}`)\n  }\n  // try to return a flux float literal if possible\n  // https://docs.influxdata.com/flux/v0.x/data-types/basic/float/#float-syntax\n  const strVal = val.toString()\n  let hasDot = false\n  for (const c of strVal) {\n    if ((c >= '0' && c <= '9') || c == '-') continue\n    if (c === '.') {\n      hasDot = true\n      continue\n    }\n    return `float(v: \"${strVal}\")`\n  }\n  return hasDot ? strVal : strVal + '.0'\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Sanitizes integer value to avoid injections.\n * @param value - InfluxDB integer literal\n * @returns sanitized integer value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeInteger(value: any): string {\n  // https://docs.influxdata.com/flux/v0.x/data-types/basic/int/\n  // Min value: -9223372036854775808\n  // Max value: 9223372036854775807\n  // \"9223372036854775807\".length === 19\n  const strVal = String(value)\n  const negative = strVal.startsWith('-')\n  const val = negative ? strVal.substring(1) : strVal\n  if (val.length === 0 || val.length > 19) {\n    throw new Error(`not a flux integer: ${strVal}`)\n  }\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${strVal}`)\n  }\n  if (val.length === 19) {\n    if (negative && val > '9223372036854775808') {\n      throw new Error(`flux integer out of bounds: ${strVal}`)\n    }\n    if (!negative && val > '9223372036854775807') {\n      throw new Error(`flux integer out of bounds: ${strVal}`)\n    }\n  }\n  return strVal\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeInteger(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  if (value instanceof RegExp) {\n    return value.toString()\n  }\n  return new RegExp(value).toString()\n}\n\n/**\n * Creates flux regexp literal out of a regular expression. See\n * https://docs.influxdata.com/flux/v0.x/data-types/basic/regexp/#regular-expression-syntax\n * for details.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if a regexp can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    if (Number.isSafeInteger(value)) {\n      return sanitizeInteger(value)\n    }\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  } else if (typeof value === 'bigint') {\n    return `${value}.0`\n  }\n  // use toString value for unrecognized object, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach((x) => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach((x) => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Log} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  expires: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      delay = expires - Date.now()\n      retryTime = expires\n    }\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first.next = undefined\n        this.first = newFirst\n        if (!this.first) {\n          this.last = undefined\n        }\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${\n          origSize - this.size\n        } oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      expires,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch((_e) => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, Math.max(delay, 0))\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\nimport utf8Length from '../util/utf8Length'\n\nclass WriteBuffer {\n  length = 0\n  bytes = -1\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private maxBatchBytes: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    const size = utf8Length(record)\n    if (this.length === 0) {\n      this.scheduleSend()\n    } else if (this.bytes + size + 1 >= this.maxBatchBytes) {\n      // the new size already exceeds maxBatchBytes, send it\n      this.flush().catch((_e) => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n    this.lines[this.length] = record\n    this.length++\n    this.bytes += size + 1\n    if (\n      this.length >= this.maxChunkRecords ||\n      this.bytes >= this.maxBatchBytes\n    ) {\n      this.flush().catch((_e) => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    this.bytes = -1 // lines are joined with \\n\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  public path: string\n\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.path = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    if (writeOptions?.consistency) {\n      this.path += `&consistency=${encodeURIComponent(\n        writeOptions.consistency\n      )}`\n    }\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries\n              ).catch((_e) => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      this.writeOptions.maxBatchBytes,\n      (lines) => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    retryAttempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 1 - retryAttempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        const onRetry = self.writeOptions.writeFailed.call(\n          self,\n          error,\n          lines,\n          failedAttempts,\n          expires\n        )\n        if (onRetry) {\n          return onRetry\n        }\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts,\n              expires\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            // ignore informational message about the state of InfluxDB\n            // enterprise cluster, if present\n            if (\n              error instanceof HttpError &&\n              error.json &&\n              typeof error.json.error === 'string' &&\n              error.json.error.includes('hinted handoff queue not empty')\n            ) {\n              Log.warn('Write to InfluxDB returns: ' + error.json.error)\n              responseStatusCode = 204\n              callbacks.complete()\n              return\n            }\n            // retry if possible\n            if (\n              !self.closed &&\n              retryAttempts > 0 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                retryAttempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.path,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","/**\n * Utf8Length returns an expected length of a string when UTF-8 encoded.\n * @param s - input string\n * @returns expected count of bytes\n */\nexport default function utf8Length(s: string): number {\n  let retVal = s.length\n  // extends the size with code points (https://en.wikipedia.org/wiki/UTF-8#Encoding)\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i)\n    /* istanbul ignore else - JS does not count with 4-bytes UNICODE characters at the moment */\n    if (code < 0x80) {\n      continue\n    } else if (code >= 0x80 && code <= 0x7ff) {\n      retVal++\n    } else if (code >= 0x800 && code <= 0xffff) {\n      if (code >= 0xd800 && code <= 0xdfff) {\n        // node.js represents unicode characters above 0xffff by two UTF-16 surrogate halves\n        // see https://en.wikipedia.org/wiki/UTF-8#Codepage_layout\n        retVal++\n      } else {\n        retVal += 2\n      }\n    } else {\n      // never happens in node.js 14, the situation can vary in the futures or in deno/browsers\n      retVal += 3\n    }\n  }\n  return retVal\n}\n","import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Log} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n      ...connectionOptions.headers,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async (response) => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Log.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamDefaultReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as const,\n      // override with custom transport options\n      ...this.connectionOptions.transportOptions,\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function () {}\n}\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    return this.createCSVResponse(this.createExecutor(query))\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): APIExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        consumer\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: (value) => {\n          observer.next(value)\n        },\n        error: (e) => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: (c) => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n","import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n} from '../results'\nimport {Observable} from '../observable'\nimport {AnnotatedCSVResponse} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, (observer) =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, (observer) => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {AnnotatedCSVResponse, APIExecutor} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    this.processCSVResponse = (executor: APIExecutor): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(executor, this.transport.chunkCombiner)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n"],"names":["createTextDecoderCombiner","decoder","TextDecoder","concat","first","second","retVal","Uint8Array","length","set","copy","chunk","start","end","subarray","toUtf8String","decode","chunksToLines","target","chunkCombiner","previous","chunks","finished","quoted","next","index","c","undefined","bufferReceived","e","this","error","complete","useCancellable","cancellable","self_1","cancel","isCancelled","LineSplitter","_reuse","Object","defineProperty","prototype","get","val","reusedValues","Array","withReuse","reuse","splitLine","line","lastSplitLength","quoteCount","startIndex","values","count","i","val_1","getValue","push","substring","replace","identity","x","typeSerializers","boolean","unsignedLong","long","double","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","string","base64Binary","duration","FluxTableColumnImpl","row","defaultValue","_a","dataType","UNKNOWN_COLUMN","freeze","label","group","MAX_SAFE_INTEGER","newFluxTableColumn","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","_super","message","_this","call","name","setPrototypeOf","__extends","Error","HttpError","statusMessage","body","retryAfter","contentType","startsWith","json","JSON","parse","code","setRetryAfter","test","_retryAfter","parseInt","canRetry","RETRY_CODES","getRetryDelay","retryJitter","Math","round","random","RequestTimedOutError","AbortError","FluxTableMetaDataImpl","columns","forEach","col","column","errorOnMissingColumn","toObject","acc","createFluxTableMetaData","linesToTables","consumer","lastMeta","splitter","expectMeta","firstColumnIndex","size","slice","DEFAULT_RetryDelayStrategyOptions","minRetryDelay","maxRetryDelay","exponentialBase","randomRetry","DEFAULT_WriteOptions","batchSize","maxBatchBytes","flushInterval","writeFailed","writeSuccess","maxRetries","maxRetryTime","maxBufferLines","gzipThreshold","createEscaper","characters","replacements","value","from","found","indexOf","escaper","escape","measurement","tag","zeroPadding","lastMillis","Date","now","stepsInMillis","nanos","millis_2","nanos_2","String","substr","micros","millis","seconds","floor","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","convertTimeToNanos","consoleLogger","console","warn","provider","Log","FLUX_VALUE","Symbol","FluxParameter","fluxValue","toString","isFluxParameterLike","sanitizeString","prepareRetVal","charAt","sanitizeFloat","isFinite","strVal","hasDot","strVal_1","_i","sanitizeInteger","negative","sanitizeRegExp","RegExp","fluxExpression","toFluxValue","isSafeInteger","toISOString","isArray","map","join","symbolObservable","observable","Point","measurementName","tags","fields","booleanField","intField","isNaN","uintField","charCodeAt","localeCompare","floatField","parseFloat","stringField","timestamp","time","toLineProtocol","settings","fieldsLine","keys","sort","tagsLine","defaultTags","__assign","convertTime","stringify","RetryStrategyImpl","options","success","nextDelay","failedAttempts","delay","delay_1","max","delay_2","currentDelay","min","RetryBuffer","maxLines","retryLines","nextRetryTime","closed","_timeoutHandle","addLines","lines","retryCount","expires","retryTime","origSize","newSize","newFirst","last","toAdd","scheduleRetry","removeLines","toRetry","setTimeout","then","catch","_e","flush","sent","close","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","bytes","add","record","utf8Length","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","path","encodeURIComponent","consistency","useDefaultTags","sendOptions","method","headers","writeBuffer","_clearFlushTimeout","sendBatch","bind","retryStrategy","retryBuffer","retryAttempts","self","onRetry","reject","responseStatusCode","callbacks","responseStarted","_headers","send","writeRecord","writeRecords","records","writePoint","point","writePoints","points","withRetryBuffer","finally","remaining","dispose","getResponseHeaders","response","key","FetchTransport","connectionOptions","requestDecorator","defaultHeaders","token","url","endsWith","observer","state","data","completeCommunicationObserver","cancelled","signal","controller_1","AbortController","abort","aborted","fetch","__awaiter","status","text","headerError","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","request","_c","responseContentType","responseType","_b","accept","other","__rest","credentials","transportOptions","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","createCSVResponse","with","query","createExecutor","rows","queryLines","consumeLines","queryRows","consumeRows","collectRows","rowMapper","collectLines","queryRaw","type","gzip","decorateRequest","dialect","QuerySubscription","executor","isClosed","unsubscribe","noop","ObservableQuery","decorator","subscribe","observerOrNext","completeObserver","defaultRowMapping","tableMeta","AnnotatedCSVResponseImpl","InfluxDB","_options","TransportImpl","processCSVResponse","getWriteApi","getQueryApi","timeout","object","Boolean","strings","arguments","parts","partIndex","sanitized","sanitizeDateTime","logger","source","use"],"mappings":"+CA2CgBA,IACd,IAAMC,EAAU,IAAIC,YAAY,SAChC,MAAO,CACLC,OAAA,SAAOC,EAAmBC,GACxB,IAAMC,EAAS,IAAIC,WAAWH,EAAMI,OAASH,EAAOG,QAGpD,OAFAF,EAAOG,IAAIL,GACXE,EAAOG,IAAIJ,EAAQD,EAAMI,QAClBF,CACR,EACDI,KAAA,SAAKC,EAAmBC,EAAeC,GACrC,IAAMP,EAAS,IAAIC,WAAWM,EAAMD,GAEpC,OADAN,EAAOG,IAAIE,EAAMG,SAASF,EAAOC,IAC1BP,CACR,EACDS,aAAA,SAAaJ,EAAmBC,EAAeC,GAC7C,OAAOZ,EAAQe,OAAOL,EAAMG,SAASF,EAAOC,GAC7C,EAEL,CClDgB,SAAAI,EACdC,EACAC,GAEA,IACIC,EADEC,EAASF,QAAAA,EAAiBnB,IAE5BsB,GAAW,EACXC,GAAS,EAoCb,MAAO,CACLC,KAAA,SAAKb,GACH,IAAIW,EACJ,KArCJ,SAAwBX,GACtB,IAAIc,EACAb,EAAQ,EAOZ,IANIQ,GACFT,EAAQU,EAAOlB,OAAOiB,EAAUT,GAChCc,EAASL,EAAoBZ,QAE7BiB,EAAQ,EAEHA,EAAQd,EAAMH,QAAQ,CAC3B,IAAMkB,EAAIf,EAAMc,GAChB,GAAU,KAANC,GACF,IAAKH,EAAQ,CAEX,IAAMV,EAAMY,EAAQ,GAA0B,KAArBd,EAAMc,EAAQ,GAAYA,EAAQ,EAAIA,EAE/D,GAAIH,EACF,OAEFJ,EAAOM,KAAKH,EAAON,aAAaJ,EAAOC,EAAOC,IAC9CD,EAAQa,EAAQ,CACjB,OACc,KAANC,IACTH,GAAUA,GAEZE,GACD,CAECL,EADER,EAAQa,EACCJ,EAAOX,KAAKC,EAAOC,EAAOa,QAE1BE,CAEd,CAMKC,CAAejB,EAGhB,CAFC,MAAOkB,GACPC,KAAKC,MAAMF,EACZ,CACF,EACDE,MAAA,SAAMA,GACCT,IACHA,GAAW,EACXJ,EAAOa,MAAMA,GAEhB,EACDC,SAAA,WACOV,IACCF,GACFF,EAAOM,KAAKH,EAAON,aAAaK,EAAU,EAAGA,EAASZ,SAExDc,GAAW,EACXJ,EAAOc,WAEV,EACDC,eAAA,SAAeC,GACb,GAAIhB,EAAOe,eAAgB,CAEzB,IAAME,EAAOL,KACbZ,EAAOe,eAAe,CACpBG,OAAA,WACEF,EAAYE,SACZhB,OAAWO,EACXQ,EAAKH,UACN,EACDK,YAAA,WACE,OAAOH,EAAYG,aACpB,GAEJ,CACF,EAEL,CC5FA,IAAAC,EAAA,WAAA,SAAAA,IAKUR,KAAMS,QAAG,CAoFlB,CAAD,OA/EEC,OAAAC,eAAIH,EAAKI,UAAA,QAAA,CAATC,IAAA,WACE,OAAOb,KAAKS,MACb,EACD9B,IAAA,SAAUmC,GACJA,IAAQd,KAAKe,eACff,KAAKe,aAAe,IAAIC,MAAM,KAEhChB,KAAKS,OAASK,CACf,kCAKDN,EAAAI,UAAAK,UAAA,WAEE,OADAjB,KAAKkB,OAAQ,EACNlB,MASTQ,EAASI,UAAAO,UAAT,SAAUC,GACR,GAAIA,QAEF,OADApB,KAAKqB,gBAAkB,EAChB,GAMT,IAJA,IAAIC,EAAa,EACbC,EAAa,EACXC,EAASxB,KAAKS,OAAST,KAAKe,aAAe,GAC7CU,EAAQ,EACHC,EAAI,EAAGA,EAAIN,EAAK1C,OAAQgD,IAAK,CACpC,IAAM9B,EAAIwB,EAAKM,GACf,GAAU,MAAN9B,GACF,GAAI0B,EAAa,GAAM,EAAG,CACxB,IAAMK,EAAM3B,KAAK4B,SAASR,EAAMG,EAAYG,EAAGJ,GAC3CtB,KAAKS,OACPe,EAAOC,KAAWE,EAElBH,EAAOK,KAAKF,GAEdJ,EAAaG,EAAI,EACjBJ,EAAa,CACd,MACc,MAAN1B,GACT0B,GAEH,CACD,IAAMR,EAAMd,KAAK4B,SAASR,EAAMG,EAAYH,EAAK1C,OAAQ4C,GASzD,OARItB,KAAKS,QACPe,EAAOC,GAASX,EAChBd,KAAKqB,gBAAkBI,EAAQ,IAE/BD,EAAOK,KAAKf,GACZd,KAAKqB,gBAAkBG,EAAO9C,QAGzB8C,GAGDhB,EAAQI,UAAAgB,SAAhB,SACER,EACAtC,EACAC,EACAuC,GAEA,OAAIxC,IAAUsC,EAAK1C,OACV,GACiB,IAAf4C,EACFF,EAAKU,UAAUhD,EAAOC,GACL,IAAfuC,EACFF,EAAKU,UAAUhD,EAAQ,EAAGC,EAAM,GAGhCqC,EAAKU,UAAUhD,EAAQ,EAAGC,EAAM,GAAGgD,QAAQ,OAAQ,MAG/DvB,CAAD,ICzCMwB,EAAW,SAACC,GAAmB,OAAAA,CAAA,EAMxBC,EAA4D,CACvEC,QAAS,SAACF,GAAmB,MAAM,SAANA,CAAY,EACzCG,aAAc,SAACH,GAAmB,MAAO,KAANA,EAAW,MAAQA,CAAE,EACxDI,KAAM,SAACJ,GAAmB,MAAO,KAANA,EAAW,MAAQA,CAAE,EAChDK,OAAA,SAAOL,GACL,OAAQA,GACN,IAAK,GACH,OAAO,KACT,IAAK,OACH,OAAOM,OAAOC,kBAChB,IAAK,OACH,OAAOD,OAAOE,kBAChB,QACE,OAAQR,EAEb,EACDS,OAAQV,EACRW,aAAcX,EACdY,SAAU,SAACX,GAAmB,MAAO,KAANA,EAAW,KAAOA,CAAE,EACnD,mBAAoB,SAACA,GAAmB,MAAO,KAANA,EAAW,KAAOA,CAAE,GAM/DY,EAAA,WAAA,SAAAA,IAaC,CAAD,OAPSA,EAAGjC,UAAAC,IAAV,SAAWiC,SACLhC,EAAMgC,EAAI9C,KAAKL,OAInB,MAHa,KAARmB,QAAsBjB,IAARiB,IAAsBd,KAAK+C,eAC5CjC,EAAMd,KAAK+C,eAEyB,QAA9BC,EAAAd,EAAgBlC,KAAKiD,iBAAS,IAAAD,EAAAA,EAAIhB,GAAUlB,IAEvD+B,CAAD,IACaK,EAAkCxC,OAAOyC,OAAO,CAC3DC,MAAO,GACPH,SAAU,GACVI,OAAO,EACPN,aAAc,GACdpD,MAAO4C,OAAOe,iBACdzC,IAAK,WAAe,aAON0C,IACd,OAAO,IAAIV,CACb;;;;;;;;;;;;;;;22DCjFA,IAAMW,EAAuB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE3D,SAAUC,EAAsBC,GACpC,OAAOF,EAAqBG,SAASD,EACvC,CAGA,IAAAE,EAAA,SAAAC,GAEE,SAAAD,EAAYE,GAAZ,IACEC,EAAAF,EAAAG,KAAAhE,KAAM8D,IAGP9D,YAFC+D,EAAKE,KAAO,uBACZvD,OAAOwD,eAAeH,EAAMH,EAAqBhD,YAClD,CACH,OAP0CuD,EAAKP,EAAAC,GAO9CD,CAAD,CAPA,CAA0CQ,OAY1CC,EAAA,SAAAR,GAQE,SACWQ,EAAAX,EACAY,EACAC,EACTC,EACSC,EACTX,GANF,IAAAC,EAQEF,cAsBD7D,KApBC,GATS+D,EAAUL,WAAVA,EACAK,EAAaO,cAAbA,EACAP,EAAIQ,KAAJA,EAEAR,EAAWU,YAAXA,EAIT/D,OAAOwD,eAAeH,EAAMM,EAAUzD,WAClCkD,EACFC,EAAKD,QAAUA,OACV,GAAIS,EAAM,CACf,GAAIE,aAAA,EAAAA,EAAaC,WAAW,oBAC1B,IACEX,EAAKY,KAAOC,KAAKC,MAAMN,GACvBR,EAAKD,QAAUC,EAAKY,KAAKb,QACzBC,EAAKe,KAAOf,EAAKY,KAAKG,IAGvB,CAFC,MAAO/E,GAER,CAEEgE,EAAKD,UACRC,EAAKD,QAAU,GAAGzF,OAAAqF,cAAcY,EAAa,OAAAjG,OAAMkG,GAEtD,MACCR,EAAKD,QAAU,GAAAzF,OAAGqF,EAAc,KAAArF,OAAAiG,UAElCP,EAAKE,KAAO,YACZF,EAAKgB,cAAcP,IACpB,CAqBH,OA3D+BL,EAAKE,EAAAR,GAwC1BQ,EAAazD,UAAAmE,cAArB,SAAsBP,GACM,iBAAfA,GAEL,WAAWQ,KAAKR,GAClBxE,KAAKiF,YAAcC,SAASV,GAK9BxE,KAAKiF,YAAc,GAIvBZ,EAAAzD,UAAAuE,SAAA,WACE,OAAO1B,EAAsBzD,KAAK0D,aAEpCW,EAAAzD,UAAA4D,WAAA,WACE,OAAOxE,KAAKiF,aAEfZ,CAAD,CA3DA,CAA+BD,OA8DzBgB,EAAc,CAClB,aACA,YACA,kBACA,YACA,eACA,eACA,SAsBc,SAAAC,EAAcpF,EAAeqF,GAC3C,GAAKrF,EAEE,CACL,IAAIzB,SACJ,MAAyC,mBAA7ByB,EAAcuE,WACfvE,EAAcuE,cAEvBhG,EAAS,EAEP8G,GAAeA,EAAc,EACxB9G,EAAS+G,KAAKC,MAAMD,KAAKE,SAAWH,GAEpC9G,EAEV,CAbC,OAAO,CAcX,CAGA,IAAAkH,EAAA,SAAA7B,GAEE,SAAA6B,IAAA,IAAA3B,EACEF,cAID7D,YAHCU,OAAOwD,eAAeH,EAAM2B,EAAqB9E,WACjDmD,EAAKE,KAAO,uBACZF,EAAKD,QAAU,qBAChB,CAOH,OAd0CK,EAAKuB,EAAA7B,GAQ7C6B,EAAA9E,UAAAuE,SAAA,WACE,OAAO,GAETO,EAAA9E,UAAA4D,WAAA,WACE,OAAO,GAEVkB,CAAD,CAdA,CAA0CtB,OAiB1CuB,EAAA,SAAA9B,GAEE,SAAA8B,IAAA,IAAA5B,EACEF,cAID7D,YAHC+D,EAAKE,KAAO,aACZvD,OAAOwD,eAAeH,EAAM4B,EAAW/E,WACvCmD,EAAKD,QAAU,oBAChB,CAOH,OAdgCK,EAAKwB,EAAA9B,GAQnC8B,EAAA/E,UAAAuE,SAAA,WACE,OAAO,GAETQ,EAAA/E,UAAA4D,WAAA,WACE,OAAO,GAEVmB,CAAD,CAdA,CAAgCvB,OCtGhC,IAAAwB,EAAA,WAEE,SAAAA,EAAYC,GACVA,EAAQC,SAAQ,SAACC,EAAKrE,GAAM,OAACqE,EAAIpG,MAAQ+B,CAAb,IAC5B1B,KAAK6F,QAAUA,CAChB,CAsBH,OArBED,EAAAhF,UAAAoF,OAAA,SAAO5C,EAAe6C,QAAA,IAAAA,IAAAA,GAA2B,GAC/C,IAAK,IAAIvE,EAAI,EAAGA,EAAI1B,KAAK6F,QAAQnH,OAAQgD,IAAK,CAC5C,IAAMqE,EAAM/F,KAAK6F,QAAQnE,GACzB,GAAIqE,EAAI3C,QAAUA,EAAO,OAAO2C,CACjC,CACD,GAAIE,EACF,MAAM,IAAIrC,EAAqB,iBAAUR,EAAK,gBAEhD,OAAOF,GAET0C,EAAQhF,UAAAsF,SAAR,SAASpD,GAEP,IADA,IAAMqD,EAAW,CAAA,EACRzE,EAAI,EAAGA,EAAI1B,KAAK6F,QAAQnH,QAAUgD,EAAIoB,EAAIpE,OAAQgD,IAAK,CAC9D,IAAMsE,EAAShG,KAAK6F,QAAQnE,GAC5ByE,EAAIH,EAAO5C,OAAS4C,EAAOnF,IAAIiC,EAChC,CACD,OAAOqD,GAETP,EAAAhF,UAAAC,IAAA,SAAIiC,EAAekD,GACjB,OAAOhG,KAAKgG,OAAOA,GAAQ,GAAOnF,IAAIiC,IAEzC8C,CAAD,IAOM,SAAUQ,EACdP,GAEA,OAAO,IAAID,EAAsBC,EACnC,CCjGM,SAAUQ,EACdC,GAEA,IACIT,EAGAU,EAJEC,GAAW,IAAIhG,GAAeS,YAEhCwF,GAAa,EACbC,EAAmB,EAEvB,MAAO,CACLzG,MAAA,SAAMA,GACJqG,EAASrG,MAAMA,EAChB,EACDP,KAAA,SAAK0B,GACH,GAAa,KAATA,EACFqF,GAAa,EACbZ,OAAUhG,MACL,CACL,IAAM2B,EAASgF,EAASrF,UAAUC,GAC5BuF,EAAOH,EAASnF,gBACtB,GAAIoF,EAAY,CAEd,IAAKZ,EAAS,CACZA,EAAU,IAAI7E,MAAM2F,GACpB,IAAK,IAAIjF,EAAI,EAAGA,EAAIiF,EAAMjF,IACxBmE,EAAQnE,GAAK6B,GAEhB,CACD,GAAK/B,EAAO,GAAGkD,WAAW,MAanB,GAAkB,cAAdlD,EAAO,GAChB,IAASE,EAAI,EAAGA,EAAIiF,EAAMjF,IACxBmE,EAAQnE,GAAGuB,SAAWzB,EAAOE,QAE1B,GAAkB,aAAdF,EAAO,GAChB,IAASE,EAAI,EAAGA,EAAIiF,EAAMjF,IACxBmE,EAAQnE,GAAGqB,aAAevB,EAAOE,QAE9B,GAAkB,WAAdF,EAAO,GAChB,IAASE,EAAI,EAAGA,EAAIiF,EAAMjF,IACxBmE,EAAQnE,GAAG2B,MAAyB,MAAjB7B,EAAOE,GAAG,OAvBD,CAEZ,KAAdF,EAAO,IACTkF,EAAmB,EACnBb,EAAUA,EAAQe,MAAM,IAExBF,EAAmB,EAErB,IAAK,IAAIhF,EAAIgF,EAAkBhF,EAAIiF,EAAMjF,IACvCmE,EAAQnE,EAAIgF,GAAkBtD,MAAQ5B,EAAOE,GAE/C6E,EAAWH,EAAwBP,GACnCY,GAAa,CACd,CAaF,MACCH,EAAS5G,KAAK8B,EAAOoF,MAAMF,EAAkBC,GAAOJ,EAEvD,CACF,EACDrG,SAAA,WACEoG,EAASpG,UACV,EACDC,eAAA,SAAeC,GACTkG,EAASnG,gBAAgBmG,EAASnG,eAAeC,EACtD,EAEL,CCxCa,IAoFAyG,EAAoC,CAC/CvB,YAAa,IACbwB,cAAe,IACfC,cAAe,MACfC,gBAAiB,EACjBC,aAAa,GAIFC,EAAqC,CAChDC,UAAW,IACXC,cAAe,IACfC,cAAe,IACfC,YAAa,WAAc,EAC3BC,aAAc,WAAc,EAC5BC,WAAY,EACZC,aAAc,KACdC,eAAgB,KAEhBpC,YAAa,IACbwB,cAAe,IACfC,cAAe,MACfC,gBAAiB,EACjBW,cAAe,IACfV,aAAa,GCpJf,SAASW,EACPC,EACAC,GAEA,OAAO,SAAUC,GAIf,IAHA,IAAIvJ,EAAS,GACTwJ,EAAO,EACPtG,EAAI,EACDA,EAAIqG,EAAMrJ,QAAQ,CACvB,IAAMuJ,EAAQJ,EAAWK,QAAQH,EAAMrG,IACnCuG,GAAS,IACXzJ,GAAUuJ,EAAMjG,UAAUkG,EAAMtG,GAChClD,GAAUsJ,EAAaG,GACvBD,EAAOtG,EAAI,GAEbA,GACD,CACD,OAAY,GAARsG,EACKD,GACEC,EAAOD,EAAMrJ,SACtBF,GAAUuJ,EAAMjG,UAAUkG,EAAMD,EAAMrJ,SAEjCF,EACT,CACF,CAYa,IAVXqJ,EACAC,EAEMK,EAOKC,EAAS,CAIpBC,YAAaT,EAAc,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,QAIpEnI,QAlBAoI,EAkB4B,MAjB5BC,EAiBmC,CAAC,MAAO,QAfrCK,EAAUP,EAAcC,EAAYC,GACnC,SAACC,GAA0B,MAAA,IAAMI,EAAQJ,GAAS,MAmBzDO,IAAKV,EAAc,YAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,SChDhEW,EAAc,YAepB,IAAIC,EAAaC,KAAKC,MAClBC,EAAgB,EACpB,SAASC,IAuBL,IAAMC,EAASJ,KAAKC,MAChBG,IAAWL,GACbA,EAAaK,EACbF,EAAgB,GAEhBA,IAEF,IAAMG,EAAQC,OAAOJ,GACrB,OAAOI,OAAOF,GAAUN,EAAYS,OAAO,EAAG,EAAIF,EAAMpK,QAAUoK,CAEtE,CAEA,SAASG,IAQL,OAAOF,OAAON,KAAKC,OAASH,EAAYS,OAAO,EAAG,EAEtD,CACA,SAASE,IACP,OAAOH,OAAON,KAAKC,MACrB,CACA,SAASS,IACP,OAAOJ,OAAOxD,KAAK6D,MAAMX,KAAKC,MAAQ,KACxC,CAOa,IAAAW,EAAc,CACzBC,EAAGH,EACHI,GAAIL,EACJM,GAAIP,EACJQ,GAAIb,EACJO,QAASA,EACTD,OAAQA,EACRD,OAAQA,EACRL,MAAOA,GAMIc,EAA0B,CACrCJ,EAAG,SAACK,GAAoB,MAAA,GAAAtL,OAAGkH,KAAK6D,MAAMO,EAAEC,UAAY,KAAO,EAC3DL,GAAI,SAACI,GAAoB,MAAA,GAAAtL,OAAGsL,EAAEC,UAAW,EACzCJ,GAAI,SAACG,GAAoB,MAAA,GAAAtL,OAAGsL,EAAEC,UAAc,MAAA,EAC5CH,GAAI,SAACE,GAAoB,MAAA,GAAAtL,OAAGsL,EAAEC,UAAiB,SAAA,GAQ3C,SAAUC,EACd9B,GAEA,YAAclI,IAAVkI,EACKa,IACmB,iBAAVb,EACTA,EAAMrJ,OAAS,EAAIqJ,OAAQlI,EACzBkI,aAAiBU,KACnB,UAAGV,EAAM6B,oBAETb,OADmB,iBAAVhB,EACFxC,KAAK6D,MAAMrB,GAEXA,EAElB,CCzGa,IAAA+B,EAAwB,CACnC7J,MAAK,SAAC6D,EAAS7D,GAEb8J,QAAQ9J,MAAM,UAAY6D,EAAS7D,GAAgB,GACpD,EACD+J,KAAI,SAAClG,EAAS7D,GAEZ8J,QAAQC,KAAK,SAAWlG,EAAS7D,GAAgB,GAClD,GAECgK,EAAmBH,EAEVI,EAAc,CACzBjK,MAAK,SAAC6D,EAAS7D,GACbgK,EAAShK,MAAM6D,EAAS7D,EACzB,EACD+J,KAAI,SAAClG,EAAS7D,GACZgK,EAASD,KAAKlG,EAAS7D,EACxB,OC5BUkK,EAAaC,OAAO,cAmBjCC,EAAA,WACE,SAAAA,EAAoBC,GAAAtK,KAASsK,UAATA,CAAqB,CAO3C,OANED,EAAAzJ,UAAA2J,SAAA,WACE,OAAOvK,KAAKsK,WAEdD,EAACzJ,UAAAuJ,GAAD,WACE,OAAOnK,KAAKsK,WAEfD,CAAD,IAOA,SAASG,EAAoBzC,GAC3B,MAAwB,iBAAVA,GAAmD,mBAAtBA,EAAMoC,EACnD,CAQA,SAASM,EAAe1C,GACtB,GAAIA,QAAuC,MAAO,GAClDA,EAAQA,EAAMwC,WACd,IAAI/L,OAAcqB,EACd6B,EAAI,EACR,SAASgJ,SACQ7K,IAAXrB,IACFA,EAASuJ,EAAMjG,UAAU,EAAGJ,GAE/B,CACD,KAAOA,EAAIqG,EAAMrJ,OAAQgD,IAAK,CAC5B,IAAM9B,EAAImI,EAAM4C,OAAOjJ,GACvB,OAAQ9B,GACN,IAAK,KACH8K,IACAlM,GAAU,MACV,MACF,IAAK,KACHkM,IACAlM,GAAU,MACV,MACF,IAAK,KACHkM,IACAlM,GAAU,MACV,MACF,IAAK,IACL,IAAK,KACHkM,IACAlM,EAASA,EAAS,KAAOoB,EACzB,MACF,IAAK,IAEH,GAAI8B,EAAI,EAAIqG,EAAMrJ,QAAkC,MAAxBqJ,EAAM4C,OAAOjJ,EAAI,GAAY,CACvDgJ,IACAhJ,IACAlD,GAAU,OACV,KACD,CAEaqB,MAAVrB,IACFA,GAAUoB,GAEZ,MACF,QACgBC,MAAVrB,IACFA,GAAUoB,GAGjB,CACD,YAAeC,IAAXrB,EACKA,EAEFuJ,CACT,CAeM,SAAU6C,EAAc7C,GAC5B,IAAMjH,EAAMyB,OAAOwF,GACnB,IAAK8C,SAAS/J,GAAM,CAClB,GAAqB,iBAAViH,EACT,MAAO,aAAA1J,OAAayC,EAAG,MAEzB,MAAM,IAAIsD,MAAM,4BAAqB2D,GACtC,CAKD,IAFA,IAAM+C,EAAShK,EAAIyJ,WACfQ,GAAS,MACGC,EAAAF,EAAAG,EAAMD,EAAAtM,OAANuM,IAAQ,CAAnB,IAAMrL,EAACoL,EAAAC,GACV,KAAKrL,GAAK,KAAOA,GAAK,KAAa,KAALA,GAA9B,CACA,GAAU,MAANA,EAIJ,MAAO,aAAAvB,OAAayM,EAAM,MAHxBC,GAAS,CAFqC,CAMjD,CACD,OAAOA,EAASD,EAASA,EAAS,IACpC,CAcM,SAAUI,EAAgBnD,GAK9B,IAAM+C,EAAS/B,OAAOhB,GAChBoD,EAAWL,EAAOpG,WAAW,KAC7B5D,EAAMqK,EAAWL,EAAOhJ,UAAU,GAAKgJ,EAC7C,GAAmB,IAAfhK,EAAIpC,QAAgBoC,EAAIpC,OAAS,GACnC,MAAM,IAAI0F,MAAM,8BAAuB0G,IAEzC,IAAgB,QAAAnJ,EAAAb,EAAAmK,EAAGtJ,EAAAjD,OAAHuM,IAAK,CAAhB,IAAMrL,EAAC+B,EAAAsJ,GACV,GAAIrL,EAAI,KAAOA,EAAI,IAAK,MAAM,IAAIwE,MAAM,8BAAuB0G,GAChE,CACD,GAAmB,KAAfhK,EAAIpC,OAAe,CACrB,GAAIyM,GAAYrK,EAAM,sBACpB,MAAM,IAAIsD,MAAM,sCAA+B0G,IAEjD,IAAKK,GAAYrK,EAAM,sBACrB,MAAM,IAAIsD,MAAM,sCAA+B0G,GAElD,CACD,OAAOA,CACT,CA2BA,SAASM,EAAerD,GACtB,OAAIA,aAAiBsD,OACZtD,EAAMwC,WAER,IAAIc,OAAOtD,GAAOwC,UAC3B,CA4BM,SAAUe,EAAevD,GAC7B,OAAO,IAAIsC,EAActB,OAAOhB,GAClC,CAOM,SAAUwD,EAAYxD,GAC1B,QAAclI,IAAVkI,EACF,MAAO,GACF,GAAc,OAAVA,EACT,MAAO,OACF,GAAqB,kBAAVA,EAChB,OAAOA,EAAMwC,WACR,GAAqB,iBAAVxC,EAChB,MAAO,WAAI0C,EAAe1C,QACrB,GAAqB,iBAAVA,EAChB,OAAIxF,OAAOiJ,cAAczD,GAChBmD,EAAgBnD,GAElB6C,EAAc7C,GAChB,GAAqB,iBAAVA,EAAoB,CACpC,GAAiC,mBAAtBA,EAAMoC,GACf,OAAOpC,EAAMoC,KACR,GAAIpC,aAAiBU,KAC1B,OAAOV,EAAM0D,cACR,GAAI1D,aAAiBsD,OAC1B,OAAOD,EAAerD,GACjB,GAAI/G,MAAM0K,QAAQ3D,GACvB,MAAO,IAAI1J,OAAA0J,EAAM4D,IAAIJ,GAAaK,KAAK,SAE1C,MAAM,GAAqB,iBAAV7D,EAChB,MAAO,GAAA1J,OAAG0J,EAAK,MAGjB,OAAOwD,EAAYxD,EAAMwC,WAC3B,CCnQa,IAAAsB,GAGQ,mBAAXzB,QAAyBA,OAAO0B,YAAe,eCMzDC,GAAA,WAYE,SAAAA,EAAYC,GAVJhM,KAAIiM,KAA4B,GAEjCjM,KAAMkM,OAA4B,GASnCF,IAAiBhM,KAAKiE,KAAO+H,EAClC,CAkNH,OA1MSD,EAAWnL,UAAAyH,YAAlB,SAAmBpE,GAEjB,OADAjE,KAAKiE,KAAOA,EACLjE,MAWF+L,EAAAnL,UAAA0H,IAAP,SAAWrE,EAAc8D,GAEvB,OADA/H,KAAKiM,KAAKhI,GAAQ8D,EACX/H,MAUF+L,EAAAnL,UAAAuL,aAAP,SAAoBlI,EAAc8D,GAEhC,OADA/H,KAAKkM,OAAOjI,GAAQ8D,EAAQ,IAAM,IAC3B/H,MAWF+L,EAAAnL,UAAAwL,SAAP,SAAgBnI,EAAc8D,GAC5B,IAAIjH,EAMJ,GAJEA,EADmB,iBAAViH,EACHA,EAEA7C,SAAS6D,OAAOhB,IAEpBsE,MAAMvL,IAAQA,IAAQ,oBAAsBA,GAAO,mBACrD,MAAM,IAAIsD,MAAM,oCAAA/F,OAAoC4F,EAAW,QAAA5F,OAAA0J,EAAS,OAG1E,OADA/H,KAAKkM,OAAOjI,GAAQ,GAAA5F,OAAGkH,KAAK6D,MAAMtI,QAC3Bd,MAWF+L,EAAAnL,UAAA0L,UAAP,SAAiBrI,EAAc8D,GAC7B,GAAqB,iBAAVA,EAAoB,CAC7B,GAAIsE,MAAMtE,IAAUA,EAAQ,GAAKA,EAAQxF,OAAOe,iBAC9C,MAAM,IAAIc,MAAM,yBAAA/F,OAAyB4F,EAAuB,oBAAA5F,OAAA0J,IAElE/H,KAAKkM,OAAOjI,GAAQ,GAAA5F,OAAGkH,KAAK6D,MAAMrB,OACnC,KAAM,CAEL,IADA,IAAM+C,EAAS/B,OAAOhB,GACbrG,EAAI,EAAGA,EAAIoJ,EAAOpM,OAAQgD,IAAK,CACtC,IAAMoD,EAAOgG,EAAOyB,WAAW7K,GAC/B,GAAIoD,EAAO,IAAMA,EAAO,GACtB,MAAM,IAAIV,MACR,kDAAA/F,OAAkDqD,EAAM,MAAArD,OAAA0J,GAG7D,CACD,GACE+C,EAAOpM,OAAS,IACG,KAAlBoM,EAAOpM,QACNoM,EAAO0B,cAAc,wBAA0B,EAEjD,MAAM,IAAIpI,MACR,yBAAA/F,OAAyB4F,EAAuB,oBAAA5F,OAAAyM,IAGpD9K,KAAKkM,OAAOjI,GAAQ,GAAA5F,OAAGyM,EAAM,IAC9B,CACD,OAAO9K,MAWF+L,EAAAnL,UAAA6L,WAAP,SAAkBxI,EAAc8D,GAC9B,IAAIjH,EAMJ,GAJEA,EADmB,iBAAViH,EACHA,EAEA2E,WAAW3E,IAEd8C,SAAS/J,GACZ,MAAM,IAAIsD,MAAM,kCAAA/F,OAAkC4F,EAAU,OAAA5F,OAAA0J,IAI9D,OADA/H,KAAKkM,OAAOjI,GAAQ8E,OAAOjI,GACpBd,MAUF+L,EAAAnL,UAAA+L,YAAP,SAAmB1I,EAAc8D,GAK/B,OAJIA,UACmB,iBAAVA,IAAoBA,EAAQgB,OAAOhB,IAC9C/H,KAAKkM,OAAOjI,GAAQmE,EAAO3I,OAAOsI,IAE7B/H,MAqBF+L,EAASnL,UAAAgM,UAAhB,SAAiB7E,GAEf,OADA/H,KAAK6M,KAAO9E,EACL/H,MASF+L,EAAcnL,UAAAkM,eAArB,SAAsBC,GAAtB,IAuCChJ,EAAA/D,KAtCC,GAAKA,KAAKiE,KAAV,CACA,IAAI+I,EAAa,GAUjB,GATAtM,OAAOuM,KAAKjN,KAAKkM,QACdgB,OACApH,SAAQ,SAAC7D,GACR,GAAIA,EAAG,CACL,IAAMnB,EAAMiD,EAAKmI,OAAOjK,GACpB+K,EAAWtO,OAAS,IAAGsO,GAAc,KACzCA,GAAc,GAAG3O,OAAA+J,EAAOE,IAAIrG,GAAE,KAAA5D,OAAIyC,EACnC,CACH,IACwB,IAAtBkM,EAAWtO,OAAf,CACA,IAAIyO,EAAW,GACTlB,EACJc,GAAYA,EAASK,YACbC,EAAAA,EAAA,CAAA,EAAAN,EAASK,aAAgBpN,KAAKiM,MAClCjM,KAAKiM,KACXvL,OAAOuM,KAAKhB,GACTiB,OACApH,SAAQ,SAAC7D,GACR,GAAIA,EAAG,CACL,IAAMnB,EAAMmL,EAAKhK,GACbnB,IACFqM,GAAY,IACZA,GAAY,GAAG9O,OAAA+J,EAAOE,IAAIrG,GAAM,KAAA5D,OAAA+J,EAAOE,IAAIxH,IAE9C,CACH,IACF,IAAI+L,EAAO7M,KAAK6M,KAOhB,OALEA,EADEE,GAAYA,EAASO,YAChBP,EAASO,YAAYT,GAErBhD,EAAmBgD,GAGrB,GAAGxO,OAAA+J,EAAOC,YAAYrI,KAAKiE,OAAK5F,OAAG8O,EAAQ,KAAA9O,OAAI2O,GAAU3O,YACrDwB,IAATgN,EAAqB,IAAMA,EAAO,GAzBS,CAXb,GAwClCd,EAAAnL,UAAA2J,SAAA,WACE,IAAMnJ,EAAOpB,KAAK8M,oBAAejN,GACjC,OAAOuB,GAAc,kBAAA/C,OAAkBuG,KAAK2I,UAAUvN,UAAMH,KAE/DkM,CAAD,ICzOAyB,GAAA,WAIE,SAAAA,EAAYC,GACVzN,KAAKyN,QAAOJ,EAAAA,EAAA,CAAA,EAAOxG,GAAsC4G,GACzDzN,KAAK0N,SACN,CAwDH,OAtDEF,EAAA5M,UAAA+M,UAAA,SAAU1N,EAAe2N,GACvB,IAAMC,EAAQxI,EAAcpF,GAC5B,GAAI4N,GAASA,EAAQ,EACnB,OAAOA,EAAQtI,KAAKC,MAAMD,KAAKE,SAAWzF,KAAKyN,QAAQnI,aAEvD,GAAIsI,GAAkBA,EAAiB,EAAG,CAExC,GAAI5N,KAAKyN,QAAQxG,YAAa,CAI5B,IAFA,IAAI6G,EAAQvI,KAAKwI,IAAI/N,KAAKyN,QAAQ3G,cAAe,GAC7C6G,EAAYG,EAAQ9N,KAAKyN,QAAQzG,gBAC5BtF,EAAI,EAAGA,EAAIkM,EAAgBlM,IAGlC,GAFAoM,EAAQH,GACRA,GAAwB3N,KAAKyN,QAAQzG,kBACpBhH,KAAKyN,QAAQ1G,cAAe,CAC3C4G,EAAY3N,KAAKyN,QAAQ1G,cACzB,KACD,CAEH,OACE+G,EACAvI,KAAKC,MACHD,KAAKE,UAAYkI,EAAYG,GAC3BvI,KAAKE,SAAWzF,KAAKyN,QAAQnI,YAGpC,CAED,IAAI0I,EAAQzI,KAAKwI,IAAI/N,KAAKyN,QAAQ3G,cAAe,GACjD,IAASpF,EAAI,EAAGA,EAAIkM,EAAgBlM,IAElC,IADAsM,GAAgBhO,KAAKyN,QAAQzG,kBAChBhH,KAAKyN,QAAQ1G,cAAe,CACvCiH,EAAQhO,KAAKyN,QAAQ1G,cACrB,KACD,CAEH,OAAOiH,EAAQzI,KAAKC,MAAMD,KAAKE,SAAWzF,KAAKyN,QAAQnI,YACxD,CAWD,OAXWtF,KAAKiO,aACdjO,KAAKiO,aAAe1I,KAAK2I,IACvB3I,KAAKwI,IAAI/N,KAAKiO,aAAejO,KAAKyN,QAAQzG,gBAAiB,GACzDzB,KAAKC,MAAMD,KAAKE,SAAWzF,KAAKyN,QAAQnI,aAC1CtF,KAAKyN,QAAQ1G,eAGf/G,KAAKiO,aACHjO,KAAKyN,QAAQ3G,cACbvB,KAAKC,MAAMD,KAAKE,SAAWzF,KAAKyN,QAAQnI,aAErCtF,KAAKiO,cAGhBT,EAAA5M,UAAA8M,QAAA,WACE1N,KAAKiO,kBAAepO,GAEvB2N,CAAD,ICtEA,IAYAW,GAAA,WAQE,SACUA,EAAAC,EACAC,GADArO,KAAQoO,SAARA,EACApO,KAAUqO,WAAVA,EAPVrO,KAAI2G,KAAG,EACP3G,KAAasO,cAAG,EAChBtO,KAAMuO,QAAG,EACDvO,KAAcwO,oBAAQ3O,CAS1B,CAmGN,OAjGEsO,EAAQvN,UAAA6N,SAAR,SACEC,EACAC,EACAd,EACAe,GAEA,IAAI5O,KAAKuO,QACJG,EAAMhQ,OAAX,CACA,IAAImQ,EAAYpG,KAAKC,MAAQmF,EAO7B,GANIe,EAAUC,IACZhB,EAAQe,EAAUnG,KAAKC,MACvBmG,EAAYD,GAEVC,EAAY7O,KAAKsO,gBAAetO,KAAKsO,cAAgBO,GAErD7O,KAAK1B,OAAS0B,KAAK2G,KAAO+H,EAAMhQ,OAASsB,KAAKoO,SAAU,CAC1D,IAAMU,EAAW9O,KAAK2G,KAChBoI,EAAqB,GAAXD,EAChB,EAAG,CACD,IAAME,EAAWhP,KAAK1B,MAAMoB,KAC5BM,KAAK2G,MAAQ3G,KAAK1B,MAAMoQ,MAAMhQ,OAC9BsB,KAAK1B,MAAMoB,UAAOG,EAClBG,KAAK1B,MAAQ0Q,EACRhP,KAAK1B,QACR0B,KAAKiP,UAAOpP,EAEf,OAAQG,KAAK1B,OAAS0B,KAAK2G,KAAO+H,EAAMhQ,OAASqQ,GAClD7E,EAAIjK,MACF,gBAAA5B,OACEyQ,EAAW9O,KAAK2G,6EAEhB3G,KAAKoO,SAAQ,UAGlB,CACD,IAAMc,EAAmB,CACvBR,MAAKA,EACLC,WAAUA,EACVC,QAAOA,GAEL5O,KAAKiP,MACPjP,KAAKiP,KAAKvP,KAAOwP,EACjBlP,KAAKiP,KAAOC,IAEZlP,KAAK1B,MAAQ4Q,EACblP,KAAKiP,KAAOC,EACZlP,KAAKmP,cAActB,IAErB7N,KAAK2G,MAAQ+H,EAAMhQ,MAzCM,GA4C3ByP,EAAAvN,UAAAwO,YAAA,WACE,GAAIpP,KAAK1B,MAAO,CACd,IAAM+Q,EAAUrP,KAAK1B,MAKrB,OAJA0B,KAAK1B,MAAQ0B,KAAK1B,MAAMoB,KACxB2P,EAAQ3P,UAAOG,EACfG,KAAK2G,MAAQ0I,EAAQX,MAAMhQ,OACtBsB,KAAK1B,QAAO0B,KAAKiP,UAAOpP,GACtBwP,CACR,GAIHlB,EAAavN,UAAAuO,cAAb,SAActB,GAAd,IAiBC9J,EAAA/D,KAhBCA,KAAKwO,eAAiBc,YAAW,WAC/B,IAAMD,EAAUtL,EAAKqL,cACjBC,EACFtL,EAAKsK,WAAWgB,EAAQX,MAAOW,EAAQV,WAAYU,EAAQT,SACxDW,MAAK,WAEJxL,EAAKoL,cAnGM,EAoGb,IACCK,OAAM,SAACC,GAEN1L,EAAKoL,cAAcpL,EAAKuK,cAAgB7F,KAAKC,MAC/C,IAEF3E,EAAKyK,oBAAiB3O,CAEzB,GAAE0F,KAAKwI,IAAIF,EAAO,KAGfM,EAAAvN,UAAA8O,MAAN,2GAES,OAACL,EAAUrP,KAAKoP,eACrB,CAAA,EAAMpP,KAAKqO,WAAWgB,EAAQX,MAAOW,EAAQV,WAAYU,EAAQT,UAD9B,CAAA,EAAA,iBACnC5L,EAAA2M,oCAEH,EAEDxB,EAAAvN,UAAAgP,MAAA,WAME,OALI5P,KAAKwO,iBACPqB,aAAa7P,KAAKwO,gBAClBxO,KAAKwO,oBAAiB3O,GAExBG,KAAKuO,QAAS,EACPvO,KAAK2G,MAEfwH,CAAD,ICjHA,IAAA2B,GAAA,WAKE,SAAAA,EACUC,EACA3I,EACA4I,EACAC,GAHAjQ,KAAe+P,gBAAfA,EACA/P,KAAaoH,cAAbA,EACApH,KAAOgQ,QAAPA,EACAhQ,KAAYiQ,aAAZA,EARVjQ,KAAMtB,OAAG,EACTsB,KAAKkQ,OAAI,EASPlQ,KAAK0O,MAAQ,IAAI1N,MAAc+O,EAChC,CAsCH,OApCED,EAAGlP,UAAAuP,IAAH,SAAIC,GACF,IAAMzJ,EC1Bc,SAAW2C,GAGjC,IAFA,IAAI9K,EAAS8K,EAAE5K,OAENgD,EAAI,EAAGA,EAAI4H,EAAE5K,OAAQgD,IAAK,CACjC,IAAMoD,EAAOwE,EAAEiD,WAAW7K,GAEtBoD,EAAO,MAEAA,GAAQ,KAAQA,GAAQ,KACjCtG,IACSsG,GAAQ,MAASA,GAAQ,MAC9BA,GAAQ,OAAUA,GAAQ,MAG5BtG,IAEAA,GAAU,EAIZA,GAAU,EAEb,CACD,OAAOA,CACT,CDEiB6R,CAAWD,GACJ,IAAhBpQ,KAAKtB,OACPsB,KAAKiQ,eACIjQ,KAAKkQ,MAAQvJ,EAAO,GAAK3G,KAAKoH,eAEvCpH,KAAK0P,QAAQF,OAAM,SAACC,GAEpB,IAEFzP,KAAK0O,MAAM1O,KAAKtB,QAAU0R,EAC1BpQ,KAAKtB,SACLsB,KAAKkQ,OAASvJ,EAAO,GAEnB3G,KAAKtB,QAAUsB,KAAK+P,iBACpB/P,KAAKkQ,OAASlQ,KAAKoH,gBAEnBpH,KAAK0P,QAAQF,OAAM,SAACC,GAEpB,KAGJK,EAAAlP,UAAA8O,MAAA,WACE,IAAMhB,EAAQ1O,KAAKsQ,QACnB,OAAI5B,EAAMhQ,OAAS,EACVsB,KAAKgQ,QAAQtB,GAEb6B,QAAQC,WAGnBV,EAAAlP,UAAA0P,MAAA,WACE,IAAM9R,EAASwB,KAAK0O,MAAM9H,MAAM,EAAG5G,KAAKtB,QAGxC,OAFAsB,KAAKtB,OAAS,EACdsB,KAAKkQ,OAAS,EACP1R,GAEVsR,CAAD,IAEAW,GAAA,WAcE,SACUA,EAAAC,EACRC,EACAC,EACAC,EACAC,GALF,IAoEC/M,EAAA/D,KAnESA,KAAS0Q,UAATA,EAXF1Q,KAAMuO,QAAG,EAGTvO,KAAcwO,oBAAQ3O,EAc5BG,KAAK+Q,KAAO,qBAAqB1S,OAAA2S,mBAC/BL,GACU,YAAAtS,OAAA2S,mBAAmBJ,GAAqB,eAAAvS,OAAAwS,IAChDC,eAAAA,EAAcG,eAChBjR,KAAK+Q,MAAQ,gBAAgB1S,OAAA2S,mBAC3BF,EAAaG,eAGjBjR,KAAK8Q,aAAYzD,EAAAA,EAAA,CAAA,EACZnG,GACA4J,GAEL9Q,KAAKqJ,YAAcA,EAAYwH,GAC/B7Q,KAAK0J,wBAA0BA,EAAwBmH,GACnD7Q,KAAK8Q,aAAa1D,aACpBpN,KAAKkR,eAAelR,KAAK8Q,aAAa1D,aAExCpN,KAAKmR,YAAc,CACjBC,OAAQ,OACRC,QACEhE,EAAA,CAAA,eAAgB,6BACbyD,aAAA,EAAAA,EAAcO,SAEnB1J,cAAe3H,KAAK8Q,aAAanJ,eAGnC,IFlCF8F,EEqDEzN,KAAKsR,YAAc,IAAIxB,GACrB9P,KAAK8Q,aAAa3J,UAClBnH,KAAK8Q,aAAa1J,eAClB,SAACsH,GAEC,OADA3K,EAAKwN,qBACExN,EAAKyN,UAAU9C,EAAO3K,EAAK+M,aAAatJ,WAChD,IAzBsB,WACnBzD,EAAK+M,aAAazJ,cAAgB,IACpCtD,EAAKwN,qBAEAxN,EAAKwK,SACRxK,EAAKyK,eAAiBc,YACpB,WACE,OAAAvL,EAAKyN,UACHzN,EAAKuN,YAAYhB,QACjBvM,EAAK+M,aAAatJ,YAClBgI,OAAM,SAACC,GAET,GALA,GAMF1L,EAAK+M,aAAazJ,gBAI1B,IAWArH,KAAKwR,UAAYxR,KAAKwR,UAAUC,KAAKzR,MAErCA,KAAK0R,eFhEPjE,EEgEgDzN,KAAK8Q,aF9D9C,IAAItD,GAAkBC,IE+D3BzN,KAAK2R,YAAc,IAAIxD,GACrBnO,KAAK8Q,aAAapJ,eAClB1H,KAAKwR,UAER,CAoMH,OAlMEf,EAAA7P,UAAA4Q,UAAA,SACE9C,EACAkD,EACAhD,GAHF,IA+GC7K,EAAA/D,UA5GC,IAAA4O,IAAAA,EAAkBnG,KAAKC,MAAQ1I,KAAK8Q,aAAarJ,cAGjD,IAAMoK,EAAqB7R,KACrB4N,EAAiBiE,EAAKf,aAAatJ,WAAa,EAAIoK,EAC1D,IAAK5R,KAAKuO,QAAUG,EAAMhQ,OAAS,EAAG,CACpC,GAAIkQ,GAAWnG,KAAKC,MAAO,CACzB,IAAMzI,EAAQ,IAAImE,MAAM,4BAClB0N,EAAUD,EAAKf,aAAaxJ,YAAYtD,KAC5C6N,EACA5R,EACAyO,EACAd,EACAgB,GAEF,OAAIkD,IAGJ5H,EAAIjK,MACF,sCAAA5B,OAAsCuP,EAAkB,MACxD3N,GAEKsQ,QAAQwB,OAAO9R,GACvB,CACD,OAAO,IAAIsQ,SAAc,SAACC,EAASuB,GACjC,IAAIC,EACEC,EAAY,CAChBC,gBAAA,SAAgBC,EAAmBzO,GACjCsO,EAAqBtO,CACtB,EACDzD,MAAA,SAAMA,GAEJ,IAAM6R,EAAUD,EAAKf,aAAaxJ,YAAYtD,KAC5C6N,EACA5R,EACAyO,EACAd,EACAgB,GAEF,GAAIkD,EACFA,EAAQvC,KAAKiB,EAASuB,OADxB,CAMA,GACE9R,aAAiBoE,GACjBpE,EAAM0E,MACsB,iBAArB1E,EAAM0E,KAAK1E,OAClBA,EAAM0E,KAAK1E,MAAM0D,SAAS,kCAK1B,OAHAuG,EAAIF,KAAK,8BAAgC/J,EAAM0E,KAAK1E,OACpD+R,EAAqB,SACrBC,EAAU/R,WAIZ,IACG2R,EAAKtD,QACNqD,EAAgB,MACb3R,aAAiBoE,IACjBpE,EAAoByD,YAAc,KAarC,OAXAwG,EAAIF,KACF,sCAAA3L,OAAsCuP,EAAkB,MACxD3N,GAEF4R,EAAKF,YAAYlD,SACfC,EACAkD,EAAgB,EAChBC,EAAKH,cAAc/D,UAAU1N,EAAO2N,GACpCgB,QAEFmD,EAAO9R,GAGTiK,EAAIjK,MAAM,4BAA6BA,GACvC8R,EAAO9R,EAnCN,CAoCF,EACDC,SAAA,WAEE,GAA0B,KAAtB8R,GAAmDnS,MAAtBmS,EAC/BH,EAAKf,aAAavJ,aAAavD,KAAK6N,EAAMnD,GAC1CmD,EAAKH,cAAchE,UACnB8C,QACK,CACL,IAAM1M,EAAU,+CAA+CzF,OAAA2T,eACzD/R,EAAQ,IAAIoE,EAChB2N,EACAlO,OACAjE,EACA,KAEFI,EAAM6D,QAAUA,EAChBmO,EAAUhS,MAAMA,EACjB,CACF,GAEH8D,EAAK2M,UAAU0B,KACbrO,EAAKgN,KACLrC,EAAM9C,KAAK,MACX7H,EAAKoN,YACLc,EAEJ,GACD,CACC,OAAO1B,QAAQC,WAIXC,EAAA7P,UAAA2Q,mBAAR,gBAC8B1R,IAAxBG,KAAKwO,iBACPqB,aAAa7P,KAAKwO,gBAClBxO,KAAKwO,oBAAiB3O,IAI1B4Q,EAAW7P,UAAAyR,YAAX,SAAYjC,GACV,GAAIpQ,KAAKuO,OACP,MAAM,IAAInK,MAAM,6BAElBpE,KAAKsR,YAAYnB,IAAIC,IAEvBK,EAAY7P,UAAA0R,aAAZ,SAAaC,GACX,GAAIvS,KAAKuO,OACP,MAAM,IAAInK,MAAM,6BAElB,IAAK,IAAI1C,EAAI,EAAGA,EAAI6Q,EAAQ7T,OAAQgD,IAClC1B,KAAKsR,YAAYnB,IAAIoC,EAAQ7Q,KAGjC+O,EAAU7P,UAAA4R,WAAV,SAAWC,GACT,GAAIzS,KAAKuO,OACP,MAAM,IAAInK,MAAM,6BAElB,IAAMhD,EAAOqR,EAAM3F,eAAe9M,MAC9BoB,GAAMpB,KAAKsR,YAAYnB,IAAI/O,IAEjCqP,EAAW7P,UAAA8R,YAAX,SAAYC,GACV,GAAI3S,KAAKuO,OACP,MAAM,IAAInK,MAAM,6BAElB,IAAK,IAAI1C,EAAI,EAAGA,EAAIiR,EAAOjU,OAAQgD,IAAK,CACtC,IAAMN,EAAOuR,EAAOjR,GAAGoL,eAAe9M,MAClCoB,GAAMpB,KAAKsR,YAAYnB,IAAI/O,EAChC,GAEGqP,EAAK7P,UAAA8O,MAAX,SAAYkD,sFACV,KAAA,EAAA,MAAA,CAAA,EAAM5S,KAAKsR,YAAY5B,gBACnB,OADJ1M,EAAA2M,OACIiD,EACK,CAAA,EAAM5S,KAAK2R,YAAYjC,SADb,CAAA,EAAA,GACjB,KAAA,EAAA,MAAA,CAAA,EAAO1M,iCAEV,EACDyN,EAAA7P,UAAAgP,MAAA,WAAA,IAYC7L,EAAA/D,KADC,OAVeA,KAAKsR,YAAY5B,QAAQmD,SAAQ,WAC9C,IAAMC,EAAY/O,EAAK4N,YAAY/B,QAC/BkD,GACF5I,EAAIjK,MACF,4BAAA5B,OAA4ByU,EAAoD,6CAChF,MAGJ/O,EAAKwK,QAAS,CAChB,KAGFkC,EAAA7P,UAAAmS,QAAA,WAGE,OAFA/S,KAAKuR,qBACLvR,KAAKuO,QAAS,EACPvO,KAAK2R,YAAY/B,QAAU5P,KAAKsR,YAAY5S,QAKrD+R,EAAc7P,UAAAsQ,eAAd,SAAejF,GAEb,OADAjM,KAAKoN,YAAcnB,EACZjM,MAETyQ,EAAW7P,UAAA0M,YAAX,SAAYvF,GACV,YAAclI,IAAVkI,EACK/H,KAAKqJ,cACc,iBAAVtB,EACTA,EAAMrJ,OAAS,EAAIqJ,OAAQlI,EACzBkI,aAAiBU,KACnBzI,KAAK0J,wBAAwB3B,GAE7BgB,OADmB,iBAAVhB,EACFxC,KAAK6D,MAAMrB,GAEXA,IAGnB0I,CAAD,IE7UA,SAASuC,GAAmBC,GAC1B,IAAM5B,EAAmB,CAAA,EAWzB,OAVA4B,EAAS5B,QAAQvL,SAAQ,SAACiC,EAAemL,GACvC,IAAM5T,EAAW+R,EAAQ6B,QACRrT,IAAbP,EACF+R,EAAQ6B,GAAOnL,EACN/G,MAAM0K,QAAQpM,GACvBA,EAASuC,KAAKkG,GAEdsJ,EAAQ6B,GAAO,CAAC5T,EAAUyI,EAE9B,IACOsJ,CACT,CAKA,IAAA8B,GAAA,WAIE,SAAAA,EAAoBC,GAAApT,KAAiBoT,kBAAjBA,EAHpBpT,KAAaX,cAAkBnB,IA6MxB8B,KAAgBqT,iBAIX,aA7MVrT,KAAKsT,eAAcjG,EAAA,CACjB,eAAgB,mCAEb+F,EAAkB/B,SAEnBrR,KAAKoT,kBAAkBG,QACzBvT,KAAKsT,eAA8B,cACjC,SAAWtT,KAAKoT,kBAAkBG,OAEtCvT,KAAKwT,IAAMzK,OAAO/I,KAAKoT,kBAAkBI,KACrCxT,KAAKwT,IAAIC,SAAS,OACpBzT,KAAKwT,IAAMxT,KAAKwT,IAAI1R,UAAU,EAAG9B,KAAKwT,IAAI9U,OAAS,IAIjDsB,KAAKwT,IAAIC,SAAS,aACpBzT,KAAKwT,IAAMxT,KAAKwT,IAAI1R,UAAU,EAAG9B,KAAKwT,IAAI9U,OAAS,UAAUA,QAC7DwL,EAAIF,KACF,sEAAA3L,OAAsE2B,KAAKwT,IAAO,OAGvF,CAyLH,OAxLEL,EAAIvS,UAAAwR,KAAJ,SACErB,EACAxM,EACAkJ,EACAwE,GAJF,IAwFClO,EAAA/D,KAlFO0T,EC9Dc,SACtBzB,QAAA,IAAAA,IAAAA,EAAmD,CAAA,GAEnD,IAAI0B,EAAQ,EAgCZ,MA/Be,CACbjU,KAAM,SAACkU,GAEO,IAAVD,GACA1B,EAAUvS,MADViU,MAEAC,GAGA3B,EAAUvS,KAAKkU,EAElB,EACD3T,MAAO,SAACA,GAEQ,IAAV0T,IACFA,EAAQ,EAEJ1B,EAAUhS,OAAOgS,EAAUhS,MAAMA,GAExC,EACDC,SAAU,WACM,IAAVyT,IACFA,EAAQ,EAEJ1B,EAAU/R,UAAU+R,EAAU/R,WAErC,EACDgS,gBAAiB,SAACb,EAAkB3N,GAC9BuO,EAAUC,iBACZD,EAAUC,gBAAgBb,EAAS3N,EACtC,EAGL,CD0BqBmQ,CAA8B5B,GAC3C6B,GAAY,EACZC,EAAUtG,EAAgBsG,OAC9B,GAAI9B,GAAaA,EAAU9R,eAAgB,CACzC,IAAM6T,EAAa,IAAIC,gBAClBF,IACHA,EAASC,EAAWD,OACpBtG,EAAUJ,EAAKA,EAAA,CAAA,EAAAI,GAAuBsG,IAExC9B,EAAU9R,eAAe,CACvBG,OAAM,WACJwT,GAAY,EACZE,EAAWE,OACZ,EACD3T,YAAW,WACT,OAAOuT,GAAaC,EAAOI,OAC5B,GAEJ,CACDnU,KAAKoU,MAAMrD,EAAMxM,EAAMkJ,GACpB8B,MAAK,SAAO0D,GAAQ,OAAAoB,EAAAtQ,OAAA,OAAA,GAAA,yEAOf,OANAkO,eAAAA,EAAWC,kBACbwB,EAASxB,gBACPc,GAAmBC,GACnBA,EAASqB,QAGTrB,EAASqB,QAAU,IACrB,CAAA,EAAOrB,EACJsB,OACAhF,MAAK,SAACgF,GACL,IAAKA,EAAM,CACT,IAAMC,EAAcvB,EAAS5B,QAAQxQ,IAAI,oBACrC2T,IACFD,EAAOC,EAEV,CACDd,EAASzT,MACP,IAAIoE,EACF4O,EAASqB,OACTrB,EAASwB,WACTF,EACAtB,EAAS5B,QAAQxQ,IAAI,eACrBoS,EAAS5B,QAAQxQ,IAAI,iBAG3B,IACC2O,OAAM,SAACzP,GACNmK,EAAIF,KAAK,+BAAgCjK,GACzC2T,EAASzT,MACP,IAAIoE,EACF4O,EAASqB,OACTrB,EAASwB,gBACT5U,EACAoT,EAAS5B,QAAQxQ,IAAI,eACrBoS,EAAS5B,QAAQxQ,IAAI,iBAG1B,KA/BqB,CAAA,EAAA,cAiCpBoS,EAAS1O,KAAT,MAAa,CAAA,EAAA,GACTmQ,EAASzB,EAAS1O,KAAKoQ,YACzB9V,mBAEM,KAAA,EAAA,MAAA,CAAA,EAAM6V,EAAOE,eAArB/V,EAAQmE,SACR0Q,EAAShU,KAAKb,EAAMkJ,4BACZlJ,EAAMgW,KAAI,MAAA,CAAA,EAAA,+CACX5B,EAAS6B,YACH,CAAA,EAAM7B,EAAS6B,eADD,CAAA,EAAA,iBACvBC,EAAS/R,EAA4B2M,OAC3C+D,EAAShU,KAAK,IAAIjB,WAAWsW,WAEhB,KAAA,EAAA,MAAA,CAAA,EAAM9B,EAASsB,eAAtBA,EAAOvR,EAAqB2M,OAClC+D,EAAShU,MAAK,IAAIsV,aAAcC,OAAOV,2CAI5C/E,OAAM,SAACzP,GACD+T,GACHJ,EAASzT,MAAMF,EAEnB,IACC8S,SAAQ,WAAM,OAAAa,EAASxT,UAAU,KAEhCiT,EAAOvS,UAAAsU,QAAb,SACEnE,EACAxM,EACAkJ,EACAyE,uHAEiB,MAAM,CAAA,EAAAlS,KAAKoU,MAAMrD,EAAMxM,EAAMkJ,WAO1C,OAPEwF,EAAWkC,EAAqCxF,OAC/C2E,EAAmBrB,EAAbqB,OAAEjD,EAAW4B,UACpBmC,EAAsB/D,EAAQxQ,IAAI,iBAAmB,GACvDqR,GACFA,EAAgBc,GAAmBC,GAAWA,EAASqB,QAGrDA,GAAU,IACD,CAAA,EAAMrB,EAASsB,QADX,CAAA,EAAA,UAQf,MAPIX,EAAOuB,EAAqBxF,UAExB6E,EAAcnD,EAAQxQ,IAAI,uBAE9B+S,EAAOY,GAGL,IAAInQ,EACRiQ,EACArB,EAASwB,WACTb,EACAX,EAAS5B,QAAQxQ,IAAI,eACrBoS,EAAS5B,QAAQxQ,IAAI,wBAIrB,OADEwU,EAA0C,QAA3BC,EAAiB,QAAjBtS,EAAAyK,EAAQ4D,eAAS,IAAArO,OAAA,EAAAA,EAAAuS,cAAU,IAAAD,EAAAA,EAAAF,GAC/BzR,SAAS,QACjB,CAAA,EAAMsP,EAAStO,QADS,CAAA,EAAA,GAC/B,KAAA,EAKA,KAAA,EAAA,MAAA,CAAA,EAAOwQ,iBAHP,OAAAE,EAAa1R,SAAS,SACtB0R,EAAa3Q,WAAW,mBAEjB,CAAA,EAAMuO,EAASsB,QAFoB,CAAA,EAAA,0BAI7C,EAEOpB,EAAAvS,UAAAwT,MAAR,SACErD,EACAxM,EACAkJ,GAEO,IAAA2D,EAA6B3D,EAAvB2D,OAAEC,EAAqB5D,EAAd4D,QAAKmE,2UAASC,CAAAhI,EAA9B,CAAA,SAAA,YACA+F,EAAM,GAAGnV,OAAA2B,KAAKwT,KAAGnV,OAAG0S,GACpBmE,EAAO7H,EAAAA,EAAA,CACX+D,OAAQA,EACR7M,KACa,QAAX6M,GAA+B,SAAXA,OAChBvR,EACgB,iBAAT0E,EACPA,EACAK,KAAK2I,UAAUhJ,GACrB8M,QAAOhE,EAAAA,EAAA,CAAA,EACFrN,KAAKsT,gBACLjC,GAELqE,YAAa,QAEV1V,KAAKoT,kBAAkBuC,kBAEvBH,GAGL,OADAxV,KAAKqT,iBAAiB6B,EAASzH,EAAS+F,GACjCY,MAAMZ,EAAK0B,IA6BrB/B,CAAD,IErOMyC,GAAuB,CAC3BC,QAAQ,EACRC,UAAW,IACXC,UAAW,IACXC,cAAe,IACfC,YAAa,CAAC,WAAY,QAAS,YAGrCC,GAAA,WAEE,SAAAA,EACUxF,EACAyF,EACRxF,GAFQ3Q,KAAS0Q,UAATA,EACA1Q,KAAiBmW,kBAAjBA,EAGRnW,KAAKyN,QAAyB,iBAARkD,EAAmB,CAACA,IAAGA,GAAIA,CAClD,CAyGH,OAvGEuF,EAAItV,UAAAwV,KAAJ,SAAK3I,GACH,OAAO,IAAIyI,EAAalW,KAAK0Q,UAAW1Q,KAAKmW,yBACxCnW,KAAKyN,SACLA,KAIPyI,EAAQtV,UAAAqS,SAAR,SAASoD,GACP,OAAOrW,KAAKmW,kBAAkBnW,KAAKsW,eAAeD,KAGpDH,EAAKtV,UAAA8N,MAAL,SAAM2H,GACJ,OAAOrW,KAAKiT,SAASoD,GAAO3H,SAG9BwH,EAAItV,UAAA2V,KAAJ,SAAKF,GACH,OAAOrW,KAAKiT,SAASoD,GAAOE,QAG9BL,EAAAtV,UAAA4V,WAAA,SACEH,EACA/P,GAEA,OAAOtG,KAAKiT,SAASoD,GAAOI,aAAanQ,IAG3C4P,EAAAtV,UAAA8V,UAAA,SACEL,EACA/P,GAEA,OAAOtG,KAAKiT,SAASoD,GAAOM,YAAYrQ,IAG1C4P,EAAAtV,UAAAgW,YAAA,SACEP,EACAQ,GAKA,OAAO7W,KAAKiT,SAASoD,GAAOO,YAAYC,IAG1CX,EAAYtV,UAAAkW,aAAZ,SAAaT,GACX,OAAOrW,KAAKiT,SAASoD,GAAOS,gBAG9BZ,EAAQtV,UAAAmW,SAAR,SAASV,GACD,IAAArT,EAA6BhD,KAAKyN,QAAjCkD,EAAG3N,EAAA2N,IAAEqG,EAAIhU,EAAAgU,KAAEC,EAAIjU,EAAAiU,KAAE5F,YACxB,OAAOrR,KAAK0Q,UAAUwE,QACpB,qBAAA7W,OAAqB2S,mBAAmBL,IACxC/L,KAAK2I,UACHvN,KAAKkX,gBAAgB,CACnBb,MAAOA,EAAM9L,WACb4M,QAASvB,GACToB,KAAIA,KAGR,CACE5F,OAAQ,OACRC,QAAOhE,EAAA,CACLkI,OAAQ,WACR,kBAAmB0B,EAAO,OAAS,WACnC,eAAgB,oCACb5F,MAMH6E,EAActV,UAAA0V,eAAtB,SAAuBD,GAAvB,IAwBCtS,EAAA/D,KAvBOgD,EAA6BhD,KAAKyN,QAAjCkD,EAAG3N,EAAA2N,IAAEqG,EAAIhU,EAAAgU,KAAEC,EAAIjU,EAAAiU,KAAE5F,YAExB,OAAO,SAAC/K,GACNvC,EAAK2M,UAAU0B,KACb,qBAAA/T,OAAqB2S,mBAAmBL,IACxC/L,KAAK2I,UACHxJ,EAAKmT,gBAAgB,CACnBb,MAAOA,EAAM9L,WACb4M,QAASvB,GACToB,KAAIA,KAGR,CACE5F,OAAQ,OACRC,WACE,eAAgB,mCAChB,kBAAmB4F,EAAO,OAAS,YAChC5F,IAGP/K,EAEJ,GAEM4P,EAAetV,UAAAsW,gBAAvB,SAAwBhC,SAMtB,MALgC,mBAArBlV,KAAKyN,QAAQ/E,MACtBwM,EAAQxM,IAAM1I,KAAKyN,QAAQ/E,OAG7BwM,EAAQ8B,KAA4B,QAArBhU,EAAAhD,KAAKyN,QAAQuJ,YAAQ,IAAAhU,EAAAA,EAAA,OAC7BkS,GAEVgB,CAAD,ICrHAkB,GAAA,WAIE,SAAmBA,EAAA1D,EAAgC2D,GAAnD,IAsBCtT,EAAA/D,KAxBOA,KAAQsX,UAAG,EAGjB,IACED,EAAS,CACP3X,KAAM,SAACqI,GACL2L,EAAShU,KAAKqI,EACf,EACD9H,MAAO,SAACF,GACNgE,EAAKuT,UAAW,EAChB5D,EAASzT,MAAMF,EAChB,EACDG,SAAU,WACR6D,EAAKuT,UAAW,EAChB5D,EAASxT,UACV,EACDC,eAAgB,SAACP,GACfmE,EAAK3D,YAAcR,CACpB,GAKJ,CAHC,MAAOG,GACPC,KAAKsX,UAAW,EAChB5D,EAASzT,MAAMF,EAChB,CACF,CAUH,OAREW,OAAAC,eAAWyW,EAAMxW,UAAA,SAAA,CAAjBC,IAAA,WACE,OAAOb,KAAKsX,QACb,kCAEMF,EAAAxW,UAAA2W,YAAP,iBACoB,QAAlBvU,EAAAhD,KAAKI,mBAAa,IAAA4C,GAAAA,EAAA1C,SAClBN,KAAKsX,UAAW,GAEnBF,CAAD,IAEA,SAASI,KAAe,CAYxB,IAAAC,GAAA,WACE,SACmBA,EAAAJ,EACAK,GADA1X,KAAQqX,SAARA,EACArX,KAAS0X,UAATA,CACf,CAuBN,OArBSD,EAAA7W,UAAA+W,UAAP,SACEC,EACA3X,EACAC,GAEA,IAAMwT,EArBV,SAA6BA,GACpB,IAAAhU,EAAyBgU,EAAQhU,KAA3BO,EAAmByT,EAAQzT,MAApBC,EAAYwT,WAEhC,MAAO,CACLhU,KAAMA,EAAOA,EAAK+R,KAAKiC,GAAY8D,GACnCvX,MAAOA,EAAQA,EAAMwR,KAAKiC,GAAY8D,GACtCtX,SAAUA,EAAWA,EAASuR,KAAKiC,GAAY8D,GAEnD,CAaqBK,CACW,iBAAnBD,GAAkD,OAAnBA,EAClC,CAAClY,KAAMkY,EAAgB3X,MAAKA,EAAEC,SAAQA,GACtC0X,GAGN,OAAO,IAAIR,GAAkBpX,KAAK0X,UAAUhE,GAAW1T,KAAKqX,WAGvDI,EAAC7W,UAAAiL,IAAR,WACE,OAAO7L,MAMVyX,CAAD,ICjFgB,SAAAK,GACdtW,EACAuW,GAEA,OAAOA,EAAU7R,SAAS1E,EAC5B,CAMA,IAAAwW,GAAA,WACE,SACUA,EAAAX,EACAhY,GADAW,KAAQqX,SAARA,EACArX,KAAaX,cAAbA,CACN,CA8EN,OA7EE2Y,EAAApX,UAAA8N,MAAA,WAAA,IAIC3K,EAAA/D,KAHC,OAAO,IAAIyX,GAAgBzX,KAAKqX,UAAU,SAAC3D,GACzC,OAAAvU,EAAcuU,EAAU3P,EAAK1E,cAA7B,KAIJ2Y,EAAApX,UAAA2V,KAAA,WAAA,IAiBCxS,EAAA/D,KAhBC,OAAO,IAAIyX,GAAgBzX,KAAKqX,UAAU,SAAC3D,GACzC,OAAOvU,EACLkH,EAAc,CACZ3G,KAAI,SAAC8B,EAAQuW,GACXrE,EAAShU,KAAK,CAAC8B,OAAMA,EAAEuW,UAASA,GACjC,EACD9X,eAAMF,GACJ2T,EAASzT,MAAMF,EAChB,EACDG,SAAQ,WACNwT,EAASxT,UACV,IAEH6D,EAAK1E,cAET,KAGF2Y,EAAYpX,UAAA6V,aAAZ,SAAanQ,GACXtG,KAAKqX,SAASlY,EAAcmH,EAAUtG,KAAKX,iBAG7C2Y,EAAWpX,UAAA+V,YAAX,SAAYrQ,GACVtG,KAAKqX,SAASlY,EAAckH,EAAcC,GAAWtG,KAAKX,iBAG5D2Y,EAAWpX,UAAAgW,YAAX,SACEC,GADF,IA0BC9S,EAAA/D,UAzBC,IAAA6W,IAAAA,EAGqBiB,IAKrB,IAAMtZ,EAAmB,GACzB,OAAO,IAAI+R,SAAQ,SAACC,EAASuB,GAC3BhO,EAAK4S,YAAY,CACfjX,KAAA,SAAK8B,EAAkBuW,GACrB,IAAM7I,EAAQ2H,EAAU7S,KAAKhE,KAAMwB,EAAQuW,QAC7BlY,IAAVqP,GACF1Q,EAAOqD,KAAKqN,EAEf,EACDjP,MAAA,SAAMA,GACJ8R,EAAO9R,EACR,EACDC,SAAA,WACEsQ,EAAQhS,EACT,GAEL,KAGFwZ,EAAApX,UAAAkW,aAAA,WAAA,IAeC/S,EAAA/D,KAdOxB,EAAwB,GAC9B,OAAO,IAAI+R,SAAQ,SAACC,EAASuB,GAC3BhO,EAAK0S,aAAa,CAChB/W,KAAA,SAAK0B,GACH5C,EAAOqD,KAAKT,EACb,EACDnB,MAAA,SAAMA,GACJ8R,EAAO9R,EACR,EACDC,SAAA,WACEsQ,EAAQhS,EACT,GAEL,KAEHwZ,CAAD,IC1FAC,GAAA,WASE,SAAAA,EAAYxK,GAAZ,MAeC1J,EAAA/D,KAdC,GAAuB,iBAAZyN,EACTzN,KAAKkY,SAAW,CAAC1E,IAAK/F,OACjB,IAAgB,OAAZA,GAAuC,iBAAZA,EAGpC,MAAM,IAAI7J,EAAqB,sCAF/B5D,KAAKkY,SAAWzK,CAGjB,CACD,IAAM+F,EAAMxT,KAAKkY,SAAS1E,IAC1B,GAAmB,iBAARA,EACT,MAAM,IAAI5P,EAAqB,qBAC7B4P,EAAIC,SAAS,OAAMzT,KAAKkY,SAAS1E,IAAMA,EAAI1R,UAAU,EAAG0R,EAAI9U,OAAS,IACzEsB,KAAK0Q,UAAmC,QAAvB1N,EAAAhD,KAAKkY,SAASxH,iBAAS,IAAA1N,EAAAA,EAAI,IAAImV,GAAcnY,KAAKkY,UACnElY,KAAKoY,mBAAqB,SAACf,GACzB,OAAA,IAAIW,GAAyBX,EAAUtT,EAAK2M,UAAUrR,cAAtD,CACH,CAkDH,OA9BE4Y,EAAWrX,UAAAyX,YAAX,SACE1H,EACAC,EACAC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAoC,MAG7B,IAAIJ,GACTzQ,KAAK0Q,UACLC,EACAC,EACAC,EACAC,QAAAA,EAAgB9Q,KAAKkY,SAASpH,eAgBlCmH,EAAWrX,UAAA0X,YAAX,SAAY3H,GACV,OAAO,IAAIuF,GAAalW,KAAK0Q,UAAW1Q,KAAKoY,mBAAoBzH,IAEpEsH,CAAD,sDhBlDqE,CACnEM,QAAS,2OHqFL,SAA2BtY,GAC/B,QAAKA,IAEyC,mBAA3BA,EAAckF,WACpBlF,EAAckF,cACflF,EAAc6E,OAAQM,EAAYzB,SAAU1D,EAAc6E,OAIxE,qFDjBM,SACJ0T,WAEMha,EAAS,IAAIqE,EAMnB,OALArE,EAAO4E,MAAQ2F,OAAOyP,EAAOpV,OAC7B5E,EAAOyE,SAAWuV,EAAOvV,SACzBzE,EAAO6E,MAAQoV,QAAQD,EAAOnV,OAC9B7E,EAAOuE,aAAsC,QAAvBC,EAAAwV,EAAOzV,oBAAgB,IAAAC,EAAAA,EAAA,GAC7CxE,EAAOmB,MAAwB,QAAhB2V,EAAAkD,EAAO7Y,aAAS,IAAA2V,EAAAA,EAAA,EACxB9W,CACT,0HQmJM,SACJka,OACA,IAAclX,EAAA,GAAAyJ,EAAA,EAAdA,EAAc0N,UAAAja,OAAduM,IAAAzJ,EAAcyJ,EAAA,GAAA0N,UAAA1N,GAEd,GAAsB,GAAlByN,EAAQha,QAAiC,IAAlB8C,EAAO9C,OAChC,OAAO4M,EAAeoN,EAAQ,IAIhC,IAFA,IAAME,EAAQ,IAAI5X,MAAc0X,EAAQha,OAAS8C,EAAO9C,QACpDma,EAAY,EACPnX,EAAI,EAAGA,EAAIgX,EAAQha,OAAQgD,IAAK,CACvC,IAAM6S,EAAOmE,EAAQhX,GAErB,GADAkX,EAAMC,KAAetE,EACjB7S,EAAIF,EAAO9C,OAAQ,CACrB,IAAMoC,EAAMU,EAAOE,GACfoX,SACJ,GACEvE,EAAKd,SAAS,MACd/R,EAAI,EAAIgX,EAAQha,QAChBga,EAAQhX,EAAI,GAAGgD,WAAW,KAG1BoU,EAAYrO,EAAe3J,QAG3B,GAAkB,MADlBgY,EAAYvN,EAAYzK,MAGjB0J,EAAoB1J,GACvB,MAAM,IAAIsD,MACR,kCAAA/F,OAAkCyC,EAAG,gBAAAzC,OAAeqD,EAAC,YAAArD,cAAkByC,IAK/E8X,EAAMC,KAAeC,CACtB,MAAM,GAAIpX,EAAIgX,EAAQha,OAAS,EAC9B,MAAM,IAAI0F,MAAM,+BAEnB,CAED,OAAOkH,EAAesN,EAAMhN,KAAK,IACnC,aAjGM,SAAmB7D,GACvB,OACS,IAAIsC,EADC,SAAVtC,GAA8B,UAAVA,EACGA,KAECA,GAAOwC,WACrC,iBApCM,SAAuBxC,GAC3B,OAAO,IAAIsC,EARb,SAA0BtC,GACxB,MAAO,mBAAY0C,EAAe1C,QACpC,CAM2BgR,CAAiBhR,GAC5C,iBAKM,SAAuBA,GAC3B,OAAO,IAAIsC,EAAc,gBAAgBhM,OAAAoM,EAAe1C,GAAU,MACpE,iCA1DM,SAAoBA,GACxB,OAAO,IAAIsC,EAAcO,EAAc7C,GACzC,gBAoCM,SAAsBA,GAC1B,OAAO,IAAIsC,EAAca,EAAgBnD,GAC3C,eAgCM,SAAqBA,GAEzB,OAAO,IAAIsC,EAAce,EAAerD,GAC1C,eA9GM,SAAqBA,GACzB,OAAO,IAAIsC,EAAc,IAAIhM,OAAAoM,EAAe1C,GAAS,KACvD,kKN1FE7F,EAAgB,oBAAsB,SAACD,GACrC,MAAM,KAANA,EAAW,KAAO,IAAIwG,KAAKA,KAAK5D,MAAM5C,GAAtC,CACJ,yCASEC,EAAgB,oBAAsB,SAACD,GACrC,MAAM,KAANA,EAAW,KAAOwG,KAAK5D,MAAM5C,EAA7B,CACJ,yCAMEC,EAAgB,oBAAsB,SAACD,GACrC,MAAM,KAANA,EAAW,KAAOA,CAAlB,CACJ,cKCM,SAAoB+W,GACxB,IAAM1Z,EAAW2K,EAEjB,OADAA,EAAW+O,EACJ1Z,CACT,kBchCgB,SACd2Z,EACA7Z,GAMA,IAJA,IAAIK,GAAS,EACTX,EAAQ,EACRa,EAAQ,EAELA,EAAQsZ,EAAOva,QAAQ,CAC5B,IAAMkB,EAAIqZ,EAAO1M,WAAW5M,GAC5B,GAAU,KAANC,GACF,IAAKH,EAAQ,CAEX,IAAMV,EACJY,EAAQ,GAAsC,KAAjCsZ,EAAO1M,WAAW5M,EAAQ,GAAYA,EAAQ,EAAIA,EAEjEP,EAAOM,KAAKuZ,EAAOnX,UAAUhD,EAAOC,IACpCD,EAAQa,EAAQ,CACjB,OACc,KAANC,IACTH,GAAUA,GAEZE,GACD,CACGb,EAAQa,GACVP,EAAOM,KAAKuZ,EAAOnX,UAAUhD,EAAOa,IAEtCP,EAAOc,UACT,+EfjCM,SAA2BgZ,GAK7B,OAAO,CAEX"}