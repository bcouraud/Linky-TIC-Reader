{"version":3,"file":"index.browser.mjs","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/results/stringToLines.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/util/utf8Length.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/QueryApiImpl.ts","../src/results/ObservableQuery.ts","../src/results/AnnotatedCSVResponseImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare class TextDecoder {\n  constructor(encoding: string)\n  decode(chunk: Uint8Array): string\n}\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e as Error)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * FluxTableColumn describes {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n\n  /**\n   * Get returns a JavaScript object of this column in the supplied result row, using default deserializers.\n   * @param row - a data row\n   * @returns column value\n   */\n  get: (row: string[]) => any\n}\n\nconst identity = (x: string): any => x\n\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n  public get(row: string[]): any {\n    let val = row[this.index]\n    if ((val === '' || val === undefined) && this.defaultValue) {\n      val = this.defaultValue\n    }\n    return (typeSerializers[this.dataType] ?? identity)(val)\n  }\n}\nexport const UNKNOWN_COLUMN: FluxTableColumn = Object.freeze({\n  label: '',\n  dataType: '',\n  group: false,\n  defaultValue: '',\n  index: Number.MAX_SAFE_INTEGER,\n  get: () => undefined,\n})\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {\n  FluxTableColumn,\n  UNKNOWN_COLUMN,\n  typeSerializers,\n} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @param errorOnMissingColumn - throw error on missing column (by default), return UNKNOWN_COLUMN when false\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string, errorOnMissingColumn?: boolean): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied row with the help of column descriptors.\n   * @param row - a row with data for each column\n   */\n  toObject(row: string[]): {[key: string]: any}\n\n  /**\n   * Gets column values out of the supplied row.\n   * @param row - a row with data for each column\n   * @param column - column name\n   * @returns column value, undefined for unknown column\n   */\n  get(row: string[], column: string): any\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string, errorOnMissingColumn = true): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    if (errorOnMissingColumn) {\n      throw new IllegalArgumentError(`Column ${label} not found!`)\n    }\n    return UNKNOWN_COLUMN\n  }\n  toObject(row: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < row.length; i++) {\n      const column = this.columns[i]\n      acc[column.label] = column.get(row)\n    }\n    return acc\n  }\n  get(row: string[], column: string): any {\n    return this.column(column, false).get(row)\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n  /**\n   * Default HTTP headers to send with every request.\n   */\n  headers?: Record<string, string>\n  /**\n   * Full HTTP web proxy URL including schema, for example http://your-proxy:8080.\n   */\n  proxyUrl?: string\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempt - count of already failed attempts to write the lines (1 ... maxRetries+1)\n   * @param expires - expiration time for the lines to be retried in millis since epoch\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempt: number,\n    expires: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max count of retries after the first write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records/lines to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n  /** max size of a batch in bytes */\n  maxBatchBytes: number\n  /** InfluxDB Enterprise write consistency as explained in https://docs.influxdata.com/enterprise_influxdb/v1.9/concepts/clustering/#write-consistency */\n  consistency?: 'any' | 'one' | 'quorum' | 'all'\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  maxBatchBytes: 50_000_000, // default max batch size in the cloud\n  flushInterval: 60000,\n  writeFailed: function () {},\n  writeSuccess: function () {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function (value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts Point's timestamp to a string.\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = Number(value)\n  if (!isFinite(val)) {\n    if (typeof value === 'number') {\n      return `float(v: \"${val}\")`\n    }\n    throw new Error(`not a flux float: ${value}`)\n  }\n  // try to return a flux float literal if possible\n  // https://docs.influxdata.com/flux/v0.x/data-types/basic/float/#float-syntax\n  const strVal = val.toString()\n  let hasDot = false\n  for (const c of strVal) {\n    if ((c >= '0' && c <= '9') || c == '-') continue\n    if (c === '.') {\n      hasDot = true\n      continue\n    }\n    return `float(v: \"${strVal}\")`\n  }\n  return hasDot ? strVal : strVal + '.0'\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Sanitizes integer value to avoid injections.\n * @param value - InfluxDB integer literal\n * @returns sanitized integer value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeInteger(value: any): string {\n  // https://docs.influxdata.com/flux/v0.x/data-types/basic/int/\n  // Min value: -9223372036854775808\n  // Max value: 9223372036854775807\n  // \"9223372036854775807\".length === 19\n  const strVal = String(value)\n  const negative = strVal.startsWith('-')\n  const val = negative ? strVal.substring(1) : strVal\n  if (val.length === 0 || val.length > 19) {\n    throw new Error(`not a flux integer: ${strVal}`)\n  }\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${strVal}`)\n  }\n  if (val.length === 19) {\n    if (negative && val > '9223372036854775808') {\n      throw new Error(`flux integer out of bounds: ${strVal}`)\n    }\n    if (!negative && val > '9223372036854775807') {\n      throw new Error(`flux integer out of bounds: ${strVal}`)\n    }\n  }\n  return strVal\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeInteger(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  if (value instanceof RegExp) {\n    return value.toString()\n  }\n  return new RegExp(value).toString()\n}\n\n/**\n * Creates flux regexp literal out of a regular expression. See\n * https://docs.influxdata.com/flux/v0.x/data-types/basic/regexp/#regular-expression-syntax\n * for details.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if a regexp can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    if (Number.isSafeInteger(value)) {\n      return sanitizeInteger(value)\n    }\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  } else if (typeof value === 'bigint') {\n    return `${value}.0`\n  }\n  // use toString value for unrecognized object, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach((x) => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach((x) => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Log} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  expires: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      delay = expires - Date.now()\n      retryTime = expires\n    }\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first.next = undefined\n        this.first = newFirst\n        if (!this.first) {\n          this.last = undefined\n        }\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${\n          origSize - this.size\n        } oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      expires,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch((_e) => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, Math.max(delay, 0))\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\nimport utf8Length from '../util/utf8Length'\n\nclass WriteBuffer {\n  length = 0\n  bytes = -1\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private maxBatchBytes: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    const size = utf8Length(record)\n    if (this.length === 0) {\n      this.scheduleSend()\n    } else if (this.bytes + size + 1 >= this.maxBatchBytes) {\n      // the new size already exceeds maxBatchBytes, send it\n      this.flush().catch((_e) => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n    this.lines[this.length] = record\n    this.length++\n    this.bytes += size + 1\n    if (\n      this.length >= this.maxChunkRecords ||\n      this.bytes >= this.maxBatchBytes\n    ) {\n      this.flush().catch((_e) => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    this.bytes = -1 // lines are joined with \\n\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  public path: string\n\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.path = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    if (writeOptions?.consistency) {\n      this.path += `&consistency=${encodeURIComponent(\n        writeOptions.consistency\n      )}`\n    }\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries\n              ).catch((_e) => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      this.writeOptions.maxBatchBytes,\n      (lines) => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    retryAttempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 1 - retryAttempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        const onRetry = self.writeOptions.writeFailed.call(\n          self,\n          error,\n          lines,\n          failedAttempts,\n          expires\n        )\n        if (onRetry) {\n          return onRetry\n        }\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts,\n              expires\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            // ignore informational message about the state of InfluxDB\n            // enterprise cluster, if present\n            if (\n              error instanceof HttpError &&\n              error.json &&\n              typeof error.json.error === 'string' &&\n              error.json.error.includes('hinted handoff queue not empty')\n            ) {\n              Log.warn('Write to InfluxDB returns: ' + error.json.error)\n              responseStatusCode = 204\n              callbacks.complete()\n              return\n            }\n            // retry if possible\n            if (\n              !self.closed &&\n              retryAttempts > 0 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                retryAttempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.path,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","/**\n * Utf8Length returns an expected length of a string when UTF-8 encoded.\n * @param s - input string\n * @returns expected count of bytes\n */\nexport default function utf8Length(s: string): number {\n  let retVal = s.length\n  // extends the size with code points (https://en.wikipedia.org/wiki/UTF-8#Encoding)\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i)\n    /* istanbul ignore else - JS does not count with 4-bytes UNICODE characters at the moment */\n    if (code < 0x80) {\n      continue\n    } else if (code >= 0x80 && code <= 0x7ff) {\n      retVal++\n    } else if (code >= 0x800 && code <= 0xffff) {\n      if (code >= 0xd800 && code <= 0xdfff) {\n        // node.js represents unicode characters above 0xffff by two UTF-16 surrogate halves\n        // see https://en.wikipedia.org/wiki/UTF-8#Codepage_layout\n        retVal++\n      } else {\n        retVal += 2\n      }\n    } else {\n      // never happens in node.js 14, the situation can vary in the futures or in deno/browsers\n      retVal += 3\n    }\n  }\n  return retVal\n}\n","import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Log} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n      ...connectionOptions.headers,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async (response) => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Log.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamDefaultReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as const,\n      // override with custom transport options\n      ...this.connectionOptions.transportOptions,\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function () {}\n}\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    return this.createCSVResponse(this.createExecutor(query))\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): APIExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        consumer\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: (value) => {\n          observer.next(value)\n        },\n        error: (e) => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: (c) => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n","import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n} from '../results'\nimport {Observable} from '../observable'\nimport {AnnotatedCSVResponse} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, (observer) =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, (observer) => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {AnnotatedCSVResponse, APIExecutor} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    this.processCSVResponse = (executor: APIExecutor): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(executor, this.transport.chunkCombiner)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n"],"names":["createTextDecoderCombiner","decoder","TextDecoder","concat","first","second","retVal","Uint8Array","length","set","copy","chunk","start","end","subarray","toUtf8String","decode","chunksToLines","target","chunkCombiner","chunks","previous","finished","quoted","next","index","c","undefined","bufferReceived","e","this","error","complete","useCancellable","cancellable","self","cancel","isCancelled","LineSplitter","constructor","_reuse","reuse","val","reusedValues","Array","withReuse","splitLine","line","lastSplitLength","quoteCount","startIndex","values","count","i","getValue","push","substring","replace","identity","x","typeSerializers","boolean","unsignedLong","long","double","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","string","base64Binary","duration","FluxTableColumnImpl","get","row","defaultValue","_a","dataType","UNKNOWN_COLUMN","Object","freeze","label","group","MAX_SAFE_INTEGER","newFluxTableColumn","createFluxTableColumn","object","String","Boolean","_b","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","message","super","name","setPrototypeOf","prototype","HttpError","statusMessage","body","retryAfter","contentType","startsWith","json","JSON","parse","code","setRetryAfter","test","_retryAfter","parseInt","canRetry","RETRY_CODES","canRetryHttpCall","getRetryDelay","retryJitter","Math","round","random","RequestTimedOutError","AbortError","serializeDateTimeAsDate","Date","serializeDateTimeAsNumber","serializeDateTimeAsString","FluxTableMetaDataImpl","columns","forEach","col","column","errorOnMissingColumn","toObject","acc","createFluxTableMetaData","linesToTables","consumer","splitter","lastMeta","expectMeta","firstColumnIndex","size","slice","stringToLines","source","charCodeAt","DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","minRetryDelay","maxRetryDelay","exponentialBase","randomRetry","DEFAULT_WriteOptions","batchSize","maxBatchBytes","flushInterval","writeFailed","writeSuccess","maxRetries","maxRetryTime","maxBufferLines","gzipThreshold","createEscaper","characters","replacements","value","from","found","indexOf","escape","measurement","escaper","createQuotedEscaper","tag","useProcessHrtime","use","lastMillis","now","stepsInMillis","nanos","millis","substr","micros","seconds","floor","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","convertTimeToNanos","consoleLogger","console","warn","provider","Log","setLogger","logger","FLUX_VALUE","Symbol","FluxParameter","fluxValue","toString","sanitizeString","prepareRetVal","charAt","fluxString","sanitizeFloat","isFinite","strVal","hasDot","fluxFloat","sanitizeInteger","negative","fluxInteger","fluxDateTime","sanitizeDateTime","fluxDuration","sanitizeRegExp","RegExp","fluxRegExp","fluxBool","fluxExpression","toFluxValue","isSafeInteger","toISOString","isArray","map","join","flux","strings","parts","partIndex","text","sanitized","endsWith","symbolObservable","observable","Point","measurementName","tags","fields","booleanField","intField","isNaN","uintField","localeCompare","floatField","parseFloat","stringField","timestamp","time","toLineProtocol","settings","fieldsLine","keys","sort","tagsLine","defaultTags","assign","convertTime","stringify","RetryStrategyImpl","options","success","nextDelay","failedAttempts","delay","max","currentDelay","min","RetryBuffer","maxLines","retryLines","nextRetryTime","closed","_timeoutHandle","addLines","lines","retryCount","expires","retryTime","origSize","newSize","newFirst","last","toAdd","scheduleRetry","removeLines","toRetry","setTimeout","then","catch","_e","flush","close","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","bytes","add","record","utf8Length","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","path","encodeURIComponent","consistency","useDefaultTags","sendOptions","method","headers","writeBuffer","_clearFlushTimeout","sendBatch","bind","retryStrategy","retryBuffer","retryAttempts","onRetry","call","reject","responseStatusCode","callbacks","responseStarted","_headers","send","writeRecord","writeRecords","records","writePoint","point","writePoints","points","withRetryBuffer","finally","remaining","dispose","getResponseHeaders","response","key","FetchTransport","connectionOptions","requestDecorator","defaultHeaders","token","url","observer","state","data","completeCommunicationObserver","cancelled","signal","controller","AbortController","abort","aborted","fetch","__awaiter","status","headerError","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","request","responseContentType","responseType","accept","other","__rest","credentials","transportOptions","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","createCSVResponse","with","query","createExecutor","rows","queryLines","consumeLines","queryRows","consumeRows","collectRows","rowMapper","collectLines","queryRaw","type","gzip","decorateRequest","dialect","QuerySubscription","executor","isClosed","unsubscribe","noop","ObservableQuery","decorator","subscribe","observerOrNext","completeObserver","defaultRowMapping","tableMeta","AnnotatedCSVResponseImpl","InfluxDB","_options","TransportImpl","processCSVResponse","getWriteApi","getQueryApi"],"mappings":"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"}