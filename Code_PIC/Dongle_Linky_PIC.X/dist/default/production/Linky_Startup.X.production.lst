

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Jul 29 16:37:11 2025

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F1840
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Version 2.40
    20                           ; Generated 17/11/2021 GMT
    21                           ; 
    22                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC12F1840 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0006                     	;# 
    61     0007                     	;# 
    62     0008                     	;# 
    63     0009                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     0011                     	;# 
    68     0012                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001B                     	;# 
    77     001C                     	;# 
    78     001E                     	;# 
    79     001F                     	;# 
    80     008C                     	;# 
    81     0091                     	;# 
    82     0092                     	;# 
    83     0095                     	;# 
    84     0096                     	;# 
    85     0097                     	;# 
    86     0098                     	;# 
    87     0099                     	;# 
    88     009A                     	;# 
    89     009B                     	;# 
    90     009B                     	;# 
    91     009C                     	;# 
    92     009D                     	;# 
    93     009E                     	;# 
    94     010C                     	;# 
    95     0111                     	;# 
    96     0112                     	;# 
    97     0115                     	;# 
    98     0116                     	;# 
    99     0117                     	;# 
   100     0118                     	;# 
   101     0119                     	;# 
   102     011A                     	;# 
   103     011B                     	;# 
   104     011D                     	;# 
   105     011D                     	;# 
   106     018C                     	;# 
   107     0191                     	;# 
   108     0191                     	;# 
   109     0192                     	;# 
   110     0193                     	;# 
   111     0193                     	;# 
   112     0193                     	;# 
   113     0194                     	;# 
   114     0195                     	;# 
   115     0196                     	;# 
   116     0197                     	;# 
   117     0199                     	;# 
   118     019A                     	;# 
   119     019B                     	;# 
   120     019B                     	;# 
   121     019B                     	;# 
   122     019B                     	;# 
   123     019C                     	;# 
   124     019C                     	;# 
   125     019D                     	;# 
   126     019E                     	;# 
   127     019F                     	;# 
   128     020C                     	;# 
   129     0211                     	;# 
   130     0211                     	;# 
   131     0212                     	;# 
   132     0212                     	;# 
   133     0213                     	;# 
   134     0213                     	;# 
   135     0214                     	;# 
   136     0214                     	;# 
   137     0215                     	;# 
   138     0215                     	;# 
   139     0215                     	;# 
   140     0216                     	;# 
   141     0216                     	;# 
   142     0217                     	;# 
   143     0217                     	;# 
   144     0291                     	;# 
   145     0291                     	;# 
   146     0292                     	;# 
   147     0293                     	;# 
   148     0294                     	;# 
   149     0295                     	;# 
   150     0295                     	;# 
   151     0296                     	;# 
   152     0391                     	;# 
   153     0392                     	;# 
   154     0393                     	;# 
   155     039A                     	;# 
   156     039C                     	;# 
   157     039D                     	;# 
   158     039E                     	;# 
   159     039F                     	;# 
   160     0FE4                     	;# 
   161     0FE5                     	;# 
   162     0FE6                     	;# 
   163     0FE7                     	;# 
   164     0FE8                     	;# 
   165     0FE9                     	;# 
   166     0FEA                     	;# 
   167     0FEB                     	;# 
   168     0FED                     	;# 
   169     0FEE                     	;# 
   170     0FEF                     	;# 
   171     0000                     	;# 
   172     0001                     	;# 
   173     0002                     	;# 
   174     0003                     	;# 
   175     0004                     	;# 
   176     0005                     	;# 
   177     0006                     	;# 
   178     0007                     	;# 
   179     0008                     	;# 
   180     0009                     	;# 
   181     000A                     	;# 
   182     000B                     	;# 
   183     000C                     	;# 
   184     0011                     	;# 
   185     0012                     	;# 
   186     0015                     	;# 
   187     0016                     	;# 
   188     0016                     	;# 
   189     0017                     	;# 
   190     0018                     	;# 
   191     0019                     	;# 
   192     001A                     	;# 
   193     001B                     	;# 
   194     001C                     	;# 
   195     001E                     	;# 
   196     001F                     	;# 
   197     008C                     	;# 
   198     0091                     	;# 
   199     0092                     	;# 
   200     0095                     	;# 
   201     0096                     	;# 
   202     0097                     	;# 
   203     0098                     	;# 
   204     0099                     	;# 
   205     009A                     	;# 
   206     009B                     	;# 
   207     009B                     	;# 
   208     009C                     	;# 
   209     009D                     	;# 
   210     009E                     	;# 
   211     010C                     	;# 
   212     0111                     	;# 
   213     0112                     	;# 
   214     0115                     	;# 
   215     0116                     	;# 
   216     0117                     	;# 
   217     0118                     	;# 
   218     0119                     	;# 
   219     011A                     	;# 
   220     011B                     	;# 
   221     011D                     	;# 
   222     011D                     	;# 
   223     018C                     	;# 
   224     0191                     	;# 
   225     0191                     	;# 
   226     0192                     	;# 
   227     0193                     	;# 
   228     0193                     	;# 
   229     0193                     	;# 
   230     0194                     	;# 
   231     0195                     	;# 
   232     0196                     	;# 
   233     0197                     	;# 
   234     0199                     	;# 
   235     019A                     	;# 
   236     019B                     	;# 
   237     019B                     	;# 
   238     019B                     	;# 
   239     019B                     	;# 
   240     019C                     	;# 
   241     019C                     	;# 
   242     019D                     	;# 
   243     019E                     	;# 
   244     019F                     	;# 
   245     020C                     	;# 
   246     0211                     	;# 
   247     0211                     	;# 
   248     0212                     	;# 
   249     0212                     	;# 
   250     0213                     	;# 
   251     0213                     	;# 
   252     0214                     	;# 
   253     0214                     	;# 
   254     0215                     	;# 
   255     0215                     	;# 
   256     0215                     	;# 
   257     0216                     	;# 
   258     0216                     	;# 
   259     0217                     	;# 
   260     0217                     	;# 
   261     0291                     	;# 
   262     0291                     	;# 
   263     0292                     	;# 
   264     0293                     	;# 
   265     0294                     	;# 
   266     0295                     	;# 
   267     0295                     	;# 
   268     0296                     	;# 
   269     0391                     	;# 
   270     0392                     	;# 
   271     0393                     	;# 
   272     039A                     	;# 
   273     039C                     	;# 
   274     039D                     	;# 
   275     039E                     	;# 
   276     039F                     	;# 
   277     0FE4                     	;# 
   278     0FE5                     	;# 
   279     0FE6                     	;# 
   280     0FE7                     	;# 
   281     0FE8                     	;# 
   282     0FE9                     	;# 
   283     0FEA                     	;# 
   284     0FEB                     	;# 
   285     0FED                     	;# 
   286     0FEE                     	;# 
   287     0FEF                     	;# 
   288                           
   289                           	psect	idataCOMMON
   290     0727                     __pidataCOMMON:
   291                           
   292                           ;initializer for _threshold4
   293     0727  345D               	retlw	93
   294                           
   295                           ;initializer for _threshold3
   296     0728  344E               	retlw	78
   297                           
   298                           	psect	idataBANK0
   299     0729                     __pidataBANK0:
   300                           
   301                           ;initializer for _limit_Reset
   302     0729  3428               	retlw	40
   303     072A  3400               	retlw	0
   304                           
   305                           ;initializer for _limit_ADC
   306     072B  3401               	retlw	1
   307     072C  3400               	retlw	0
   308                           
   309                           	psect	nvBANK0
   310     0024                     __pnvBANK0:
   311     0024                     _last_adc:
   312     0024                     	ds	1
   313     0011                     _PIR1	set	17
   314     000B                     _INTCON	set	11
   315     008C                     _TRISAbits	set	140
   316     009E                     _ADCON1bits	set	158
   317     008C                     _TRISA	set	140
   318     0099                     _OSCCONbits	set	153
   319     0099                     _OSCCON	set	153
   320     0091                     _PIE1	set	145
   321     0095                     _OPTION_REGbits	set	149
   322     009B                     _ADRESL	set	155
   323     009C                     _ADRESH	set	156
   324     009D                     _ADCON0bits	set	157
   325     010C                     _LATAbits	set	268
   326     011D                     _APFCONbits	set	285
   327     010C                     _LATA	set	268
   328     018C                     _ANSELAbits	set	396
   329                           
   330                           	psect	cinit
   331     07DE                     start_initialization:	
   332                           ; #config settings
   333                           
   334     07DE                     __initialization:
   335                           
   336                           ; Initialize objects allocated to COMMON
   337     07DE  3187  2727  3187   	fcall	__pidataCOMMON	;fetch initializer
   338     07E1  00FC               	movwf	__pdataCOMMON& (0+127)
   339     07E2  3187  2728  3187   	fcall	__pidataCOMMON+1	;fetch initializer
   340     07E5  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   341                           
   342                           ; Initialize objects allocated to BANK0
   343     07E6  3187  2729  3187   	fcall	__pidataBANK0	;fetch initializer
   344     07E9  00A0               	movwf	__pdataBANK0& (0+127)
   345     07EA  3187  272A  3187   	fcall	__pidataBANK0+1	;fetch initializer
   346     07ED  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   347     07EE  3187  272B  3187   	fcall	__pidataBANK0+2	;fetch initializer
   348     07F1  00A2               	movwf	(__pdataBANK0+2)& (0+127)
   349     07F2  3187  272C  3187   	fcall	__pidataBANK0+3	;fetch initializer
   350     07F5  00A3               	movwf	(__pdataBANK0+3)& (0+127)
   351                           
   352                           ; Clear objects allocated to COMMON
   353     07F6  01F0               	clrf	__pbssCOMMON& (0+127)
   354     07F7  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   355     07F8  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   356     07F9  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   357     07FA  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   358     07FB  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   359     07FC  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   360     07FD                     end_of_initialization:	
   361                           ;End of C runtime variable initialization code
   362                           
   363     07FD                     __end_of__initialization:
   364     07FD  0020               	movlb	0
   365     07FE  3187  2F58         	ljmp	_main	;jump to C main() function
   366                           
   367                           	psect	bssCOMMON
   368     0070                     __pbssCOMMON:
   369     0070                     _counter_Reset:
   370     0070                     	ds	2
   371     0072                     _counter_ADC:
   372     0072                     	ds	2
   373     0074                     _currentState:
   374     0074                     	ds	1
   375     0075                     _voltage_rised:
   376     0075                     	ds	1
   377     0076                     _adc_char:
   378     0076                     	ds	1
   379                           
   380                           	psect	dataCOMMON
   381     007C                     __pdataCOMMON:
   382     007C                     _threshold4:
   383     007C                     	ds	1
   384     007D                     _threshold3:
   385     007D                     	ds	1
   386                           
   387                           	psect	dataBANK0
   388     0020                     __pdataBANK0:
   389     0020                     _limit_Reset:
   390     0020                     	ds	2
   391     0022                     _limit_ADC:
   392     0022                     	ds	2
   393                           
   394                           	psect	cstackCOMMON
   395     0077                     __pcstackCOMMON:
   396     0077                     ?_delayWithWDT:
   397     0077                     ?_main:	
   398                           ; 1 bytes @ 0x0
   399                           
   400     0077                     ?_ADC_Lecture:	
   401                           ; 1 bytes @ 0x0
   402                           
   403     0077                     delayWithWDT@cycles:	
   404                           ; 2 bytes @ 0x0
   405                           
   406                           
   407                           ; 2 bytes @ 0x0
   408     0077                     	ds	2
   409     0079                     ??_ADC_Lecture:
   410     0079                     ??_delayWithWDT:	
   411                           ; 1 bytes @ 0x2
   412                           
   413                           
   414                           ; 1 bytes @ 0x2
   415     0079                     	ds	1
   416     007A                     delayWithWDT@i:
   417                           
   418                           ; 2 bytes @ 0x3
   419     007A                     	ds	2
   420     007C                     ??_main:
   421                           
   422                           	psect	maintext
   423     0758                     __pmaintext:	
   424                           ; 1 bytes @ 0x5
   425 ;;
   426 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   427 ;;
   428 ;; *************** function _main *****************
   429 ;; Defined at:
   430 ;;		line 57 in file "main.c"
   431 ;; Parameters:    Size  Location     Type
   432 ;;		None
   433 ;; Auto vars:     Size  Location     Type
   434 ;;		None
   435 ;; Return value:  Size  Location     Type
   436 ;;                  1    wreg      void 
   437 ;; Registers used:
   438 ;;		wreg, status,2, status,0, pclath, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : B1F/0
   441 ;;		On exit  : 0/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   444 ;;      Params:         0       0       0       0
   445 ;;      Locals:         0       0       0       0
   446 ;;      Temps:          0       0       0       0
   447 ;;      Totals:         0       0       0       0
   448 ;;Total ram usage:        0 bytes
   449 ;; Hardware stack levels required when called: 1
   450 ;; This function calls:
   451 ;;		_ADC_Lecture
   452 ;;		_delayWithWDT
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458     0758                     _main:	
   459                           ;psect for function _main
   460                           
   461     0758                     l791:	
   462                           ;incstack = 0
   463                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   464                           
   465     0758  0064               	clrwdt	;# 
   466                           
   467                           ;main.c: 60:     OPTION_REGbits.PSA = 1;
   468     0759  0021               	movlb	1	; select bank1
   469     075A  1595               	bsf	21,3	;volatile
   470     075B                     l793:
   471                           
   472                           ;main.c: 61:     OPTION_REGbits.PS = 0b111;
   473     075B  3007               	movlw	7
   474     075C  0495               	iorwf	21,f	;volatile
   475     075D                     l795:
   476                           
   477                           ;main.c: 62:     INTCON = 0;
   478     075D  018B               	clrf	11	;volatile
   479     075E                     l797:
   480                           
   481                           ;main.c: 63:     PIE1 = 0;
   482     075E  0191               	clrf	17	;volatile
   483     075F                     l799:
   484                           
   485                           ;main.c: 64:     PIR1 = 0;
   486     075F  0020               	movlb	0	; select bank0
   487     0760  0191               	clrf	17	;volatile
   488     0761                     l801:
   489                           
   490                           ;main.c: 65:     OSCCON = 0b01011010;
   491     0761  305A               	movlw	90
   492     0762  0021               	movlb	1	; select bank1
   493     0763  0099               	movwf	25	;volatile
   494     0764                     l803:
   495                           
   496                           ;main.c: 66:     OSCCONbits.SCS1 = 1;
   497     0764  1499               	bsf	25,1	;volatile
   498     0765                     l805:
   499                           
   500                           ;main.c: 69:     TRISA = 0b00000001;
   501     0765  3001               	movlw	1
   502     0766  008C               	movwf	12	;volatile
   503     0767                     l807:
   504                           
   505                           ;main.c: 70:     LATA = 0x00;
   506     0767  0022               	movlb	2	; select bank2
   507     0768  018C               	clrf	12	;volatile
   508     0769                     l809:
   509                           
   510                           ;main.c: 71:     ANSELAbits.ANSA0 = 1;
   511     0769  0023               	movlb	3	; select bank3
   512     076A  140C               	bsf	12,0	;volatile
   513                           
   514                           ;main.c: 72:     ADCON1bits.ADCS = 0b000;
   515     076B  308F               	movlw	-113
   516     076C  0021               	movlb	1	; select bank1
   517     076D  059E               	andwf	30,f	;volatile
   518                           
   519                           ;main.c: 73:     ADCON1bits.ADPREF = 0b00;
   520     076E  30FC               	movlw	-4
   521     076F  059E               	andwf	30,f	;volatile
   522     0770                     l811:
   523                           
   524                           ;main.c: 74:     ADCON1bits.ADFM = 1;
   525     0770  179E               	bsf	30,7	;volatile
   526                           
   527                           ;main.c: 75:     ADCON0bits.CHS = 0b0000;
   528     0771  3083               	movlw	-125
   529     0772  059D               	andwf	29,f	;volatile
   530     0773                     l813:
   531                           
   532                           ;main.c: 76:     APFCONbits.P1BSEL = 0;
   533     0773  0022               	movlb	2	; select bank2
   534     0774  109D               	bcf	29,1	;volatile
   535     0775                     l815:
   536                           
   537                           ;main.c: 77:     TRISAbits.TRISA3 = 0;
   538     0775  0021               	movlb	1	; select bank1
   539     0776  118C               	bcf	12,3	;volatile
   540     0777                     l817:
   541                           
   542                           ;main.c: 80:     LATAbits.LATA2 = 1;
   543     0777  0022               	movlb	2	; select bank2
   544     0778  150C               	bsf	12,2	;volatile
   545     0779                     l819:
   546                           
   547                           ;main.c: 81:     last_adc = ADC_Lecture();
   548     0779  3187  272D  3187   	fcall	_ADC_Lecture
   549     077C  0877               	movf	?_ADC_Lecture,w
   550     077D  0020               	movlb	0	; select bank0
   551     077E  00A4               	movwf	_last_adc
   552     077F                     l821:
   553                           
   554                           ;main.c: 82:     LATAbits.LATA2 = 0;
   555     077F  0022               	movlb	2	; select bank2
   556     0780  110C               	bcf	12,2	;volatile
   557     0781                     l823:
   558                           
   559                           ;main.c: 84:     delayWithWDT(1);
   560     0781  3001               	movlw	1
   561     0782  00F7               	movwf	delayWithWDT@cycles
   562     0783  3000               	movlw	0
   563     0784  00F8               	movwf	delayWithWDT@cycles+1
   564     0785  3187  273E  3187   	fcall	_delayWithWDT
   565     0788                     l73:	
   566                           ;main.c: 86:     while (1) {
   567                           
   568                           
   569                           ;main.c: 87:         counter_ADC++;
   570     0788  3001               	movlw	1
   571     0789  07F2               	addwf	_counter_ADC,f
   572     078A  3000               	movlw	0
   573     078B  3DF3               	addwfc	_counter_ADC+1,f
   574                           
   575                           ;main.c: 88:         counter_Reset++;
   576     078C  3001               	movlw	1
   577     078D  07F0               	addwf	_counter_Reset,f
   578     078E  3000               	movlw	0
   579     078F  3DF1               	addwfc	_counter_Reset+1,f
   580     0790                     l825:
   581                           
   582                           ;main.c: 91:         LATAbits.LATA1 = 0;
   583     0790  0022               	movlb	2	; select bank2
   584     0791  108C               	bcf	12,1	;volatile
   585     0792  0063               	sleep	;# 
   586     0793                     l827:
   587                           
   588                           ;main.c: 93:         __nop();
   589     0793  0000               	nop
   590     0794                     l829:
   591                           
   592                           ;main.c: 95:         if (counter_ADC >= limit_ADC) {
   593     0794  0872               	movf	_counter_ADC,w
   594     0795  0473               	iorwf	_counter_ADC+1,w
   595     0796  1903               	btfsc	3,2
   596     0797  2F99               	goto	u111
   597     0798  2F9A               	goto	u110
   598     0799                     u111:
   599     0799  2FC1               	goto	l74
   600     079A                     u110:
   601     079A                     l831:
   602                           
   603                           ;main.c: 96:             counter_ADC = 0;
   604     079A  01F2               	clrf	_counter_ADC
   605     079B  01F3               	clrf	_counter_ADC+1
   606     079C                     l833:
   607                           
   608                           ;main.c: 99:                 LATAbits.LATA1 =1;
   609     079C  0022               	movlb	2	; select bank2
   610     079D  148C               	bsf	12,1	;volatile
   611     079E                     l835:
   612                           
   613                           ;main.c: 100:                 adc_char = ADC_Lecture();
   614     079E  3187  272D  3187   	fcall	_ADC_Lecture
   615     07A1  0877               	movf	?_ADC_Lecture,w
   616     07A2  00F6               	movwf	_adc_char
   617     07A3                     l837:
   618                           
   619                           ;main.c: 101:                 LATAbits.LATA1 =0;
   620     07A3  0022               	movlb	2	; select bank2
   621     07A4  108C               	bcf	12,1	;volatile
   622     07A5                     l839:
   623                           
   624                           ;main.c: 102:                if (adc_char<threshold3){
   625     07A5  304E               	movlw	78
   626     07A6  0276               	subwf	_adc_char,w
   627     07A7  1803               	skipnc
   628     07A8  2FAA               	goto	u121
   629     07A9  2FAB               	goto	u120
   630     07AA                     u121:
   631     07AA  2FAF               	goto	l843
   632     07AB                     u120:
   633     07AB                     l841:
   634                           
   635                           ;main.c: 103:                    currentState = 1;
   636     07AB  01F4               	clrf	_currentState
   637     07AC  0AF4               	incf	_currentState,f
   638                           
   639                           ;main.c: 104:                    LATAbits.LATA2=1;
   640     07AD  150C               	bsf	12,2	;volatile
   641                           
   642                           ;main.c: 105:                }else if(adc_char>threshold4){
   643     07AE  2FB6               	goto	l847
   644     07AF                     l843:
   645     07AF  305E               	movlw	94
   646     07B0  0276               	subwf	_adc_char,w
   647     07B1  1C03               	skipc
   648     07B2  2FB4               	goto	u131
   649     07B3  2FB5               	goto	u130
   650     07B4                     u131:
   651     07B4  2FB6               	goto	l847
   652     07B5                     u130:
   653     07B5                     l845:
   654                           
   655                           ;main.c: 106:                     LATAbits.LATA2=0;
   656     07B5  110C               	bcf	12,2	;volatile
   657     07B6                     l847:
   658                           
   659                           ;main.c: 109:                 if (adc_char<last_adc){
   660     07B6  0020               	movlb	0	; select bank0
   661     07B7  0824               	movf	_last_adc,w
   662     07B8  0276               	subwf	_adc_char,w
   663     07B9  1803               	skipnc
   664     07BA  2FBC               	goto	u141
   665     07BB  2FBD               	goto	u140
   666     07BC                     u141:
   667     07BC  2FBF               	goto	l851
   668     07BD                     u140:
   669     07BD                     l849:
   670                           
   671                           ;main.c: 110:                     voltage_rised = 1;
   672     07BD  01F5               	clrf	_voltage_rised
   673     07BE  0AF5               	incf	_voltage_rised,f
   674     07BF                     l851:
   675                           
   676                           ;main.c: 112:                 last_adc = adc_char;
   677     07BF  0876               	movf	_adc_char,w
   678     07C0  00A4               	movwf	_last_adc
   679     07C1                     l74:	
   680                           ;main.c: 113:             }
   681                           
   682                           
   683                           ;main.c: 114:         if (counter_Reset >= limit_Reset) {
   684     07C1  3000               	movlw	0
   685     07C2  0271               	subwf	_counter_Reset+1,w
   686     07C3  3028               	movlw	40
   687     07C4  1903               	skipnz
   688     07C5  0270               	subwf	_counter_Reset,w
   689     07C6  1C03               	skipc
   690     07C7  2FC9               	goto	u151
   691     07C8  2FCA               	goto	u150
   692     07C9                     u151:
   693     07C9  2F88               	goto	l73
   694     07CA                     u150:
   695     07CA                     l853:
   696                           
   697                           ;main.c: 115:             counter_Reset = 0;
   698     07CA  01F0               	clrf	_counter_Reset
   699     07CB  01F1               	clrf	_counter_Reset+1
   700     07CC                     l855:
   701                           
   702                           ;main.c: 116:             if (voltage_rised==0){
   703     07CC  0875               	movf	_voltage_rised,w
   704     07CD  1D03               	btfss	3,2
   705     07CE  2FD0               	goto	u161
   706     07CF  2FD1               	goto	u160
   707     07D0                     u161:
   708     07D0  2FDA               	goto	l861
   709     07D1                     u160:
   710     07D1                     l857:
   711                           
   712                           ;main.c: 117:                LATAbits.LATA2 = 0;
   713     07D1  0022               	movlb	2	; select bank2
   714     07D2  110C               	bcf	12,2	;volatile
   715     07D3                     l859:
   716                           
   717                           ;main.c: 118:                delayWithWDT(10);
   718     07D3  300A               	movlw	10
   719     07D4  00F7               	movwf	delayWithWDT@cycles
   720     07D5  3000               	movlw	0
   721     07D6  00F8               	movwf	delayWithWDT@cycles+1
   722     07D7  3187  273E  3187   	fcall	_delayWithWDT
   723     07DA                     l861:
   724                           
   725                           ;main.c: 121:             voltage_rised = 0;
   726     07DA  01F5               	clrf	_voltage_rised
   727     07DB  2F88               	goto	l73
   728     07DC  3180  2802         	ljmp	start
   729     07DE                     __end_of_main:
   730                           
   731                           	psect	text1
   732     073E                     __ptext1:	
   733 ;; *************** function _delayWithWDT *****************
   734 ;; Defined at:
   735 ;;		line 49 in file "main.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  cycles          2    0[COMMON] unsigned int 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  i               2    3[COMMON] unsigned int 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, status,2
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   749 ;;      Params:         2       0       0       0
   750 ;;      Locals:         2       0       0       0
   751 ;;      Temps:          1       0       0       0
   752 ;;      Totals:         5       0       0       0
   753 ;;Total ram usage:        5 bytes
   754 ;; Hardware stack levels used: 1
   755 ;; This function calls:
   756 ;;		Nothing
   757 ;; This function is called by:
   758 ;;		_main
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762     073E                     _delayWithWDT:	
   763                           ;psect for function _delayWithWDT
   764                           
   765     073E                     l787:	
   766                           ;incstack = 0
   767                           ; Regs used in _delayWithWDT: [wreg+status,2]
   768                           
   769                           
   770                           ;main.c: 50:     for (unsigned int i = 0; i < cycles; i++) {
   771     073E  01FA               	clrf	delayWithWDT@i
   772     073F  01FB               	clrf	delayWithWDT@i+1
   773     0740  2F4D               	goto	l65
   774     0741                     l66:
   775     0741  0064               	clrwdt	;# 
   776     0742                     l789:
   777                           
   778                           ;main.c: 52:         _delay((unsigned long)((10)*(1000000/4000.0)));
   779     0742  3004               	movlw	4
   780     0743  00F9               	movwf	??_delayWithWDT
   781     0744  303E               	movlw	62
   782     0745                     u177:
   783     0745  0B89               	decfsz	9,f
   784     0746  2F45               	goto	u177
   785     0747  0BF9               	decfsz	??_delayWithWDT,f
   786     0748  2F45               	goto	u177
   787                           
   788                           ;main.c: 53:     }
   789     0749  3001               	movlw	1
   790     074A  07FA               	addwf	delayWithWDT@i,f
   791     074B  3000               	movlw	0
   792     074C  3DFB               	addwfc	delayWithWDT@i+1,f
   793     074D                     l65:
   794     074D  0878               	movf	delayWithWDT@cycles+1,w
   795     074E  027B               	subwf	delayWithWDT@i+1,w
   796     074F  1D03               	skipz
   797     0750  2F53               	goto	u105
   798     0751  0877               	movf	delayWithWDT@cycles,w
   799     0752  027A               	subwf	delayWithWDT@i,w
   800     0753                     u105:
   801     0753  1C03               	skipc
   802     0754  2F56               	goto	u101
   803     0755  2F57               	goto	u100
   804     0756                     u101:
   805     0756  2F41               	goto	l66
   806     0757                     u100:
   807     0757                     l68:
   808     0757  0008               	return
   809     0758                     __end_of_delayWithWDT:
   810                           
   811                           	psect	text2
   812     072D                     __ptext2:	
   813 ;; *************** function _ADC_Lecture *****************
   814 ;; Defined at:
   815 ;;		line 39 in file "main.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;		None
   818 ;; Auto vars:     Size  Location     Type
   819 ;;		None
   820 ;; Return value:  Size  Location     Type
   821 ;;                  2    0[COMMON] unsigned int 
   822 ;; Registers used:
   823 ;;		wreg
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   829 ;;      Params:         2       0       0       0
   830 ;;      Locals:         0       0       0       0
   831 ;;      Temps:          0       0       0       0
   832 ;;      Totals:         2       0       0       0
   833 ;;Total ram usage:        2 bytes
   834 ;; Hardware stack levels used: 1
   835 ;; This function calls:
   836 ;;		Nothing
   837 ;; This function is called by:
   838 ;;		_main
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842     072D                     _ADC_Lecture:	
   843                           ;psect for function _ADC_Lecture
   844                           
   845     072D                     l777:	
   846                           ;incstack = 0
   847                           ; Regs used in _ADC_Lecture: [wreg]
   848                           
   849                           
   850                           ;main.c: 40:     ADCON0bits.ADON = 1;
   851     072D  0021               	movlb	1	; select bank1
   852     072E  141D               	bsf	29,0	;volatile
   853     072F                     l779:
   854                           
   855                           ;main.c: 41:     _delay((unsigned long)((2)*(1000000/4000.0)));
   856     072F  30A6               	movlw	166
   857     0730                     u187:
   858     0730  0B89               	decfsz	9,f
   859     0731  2F30               	goto	u187
   860     0732  3200               	nop2
   861     0733                     l781:
   862                           
   863                           ;main.c: 42:     ADCON0bits.GO = 1;
   864     0733  0021               	movlb	1	; select bank1
   865     0734  149D               	bsf	29,1	;volatile
   866     0735                     l59:	
   867                           ;main.c: 43:     while (ADCON0bits.GO_nDONE);
   868                           
   869     0735  189D               	btfsc	29,1	;volatile
   870     0736  2F38               	goto	u91
   871     0737  2F39               	goto	u90
   872     0738                     u91:
   873     0738  2F35               	goto	l59
   874     0739                     u90:
   875     0739                     l783:
   876                           
   877                           ;main.c: 45:     return ((ADRESH << 8) | ADRESL);
   878     0739  081C               	movf	28,w	;volatile
   879     073A  00F8               	movwf	?_ADC_Lecture+1
   880     073B  081B               	movf	27,w	;volatile
   881     073C  00F7               	movwf	?_ADC_Lecture
   882     073D                     l62:
   883     073D  0008               	return
   884     073E                     __end_of_ADC_Lecture:
   885     007E                     btemp	set	126	;btemp
   886     007E                     wtemp0	set	126
   887                           
   888                           	psect	idloc
   889                           
   890                           ;Config register IDLOC0 @ 0x8000
   891                           ;	unspecified, using default values
   892     8000                     	org	32768
   893     8000  3FFF               	dw	16383
   894                           
   895                           ;Config register IDLOC1 @ 0x8001
   896                           ;	unspecified, using default values
   897     8001                     	org	32769
   898     8001  3FFF               	dw	16383
   899                           
   900                           ;Config register IDLOC2 @ 0x8002
   901                           ;	unspecified, using default values
   902     8002                     	org	32770
   903     8002  3FFF               	dw	16383
   904                           
   905                           ;Config register IDLOC3 @ 0x8003
   906                           ;	unspecified, using default values
   907     8003                     	org	32771
   908     8003  3FFF               	dw	16383
   909                           
   910                           	psect	config
   911                           
   912                           ;Config register CONFIG1 @ 0x8007
   913                           ;	Oscillator Selection
   914                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
   915                           ;	Watchdog Timer Enable
   916                           ;	WDTE = ON, WDT enabled
   917                           ;	Power-up Timer Enable
   918                           ;	PWRTE = OFF, PWRT disabled
   919                           ;	MCLR Pin Function Select
   920                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
   921                           ;	Flash Program Memory Code Protection
   922                           ;	CP = OFF, Program memory code protection is disabled
   923                           ;	Data Memory Code Protection
   924                           ;	CPD = OFF, Data memory code protection is disabled
   925                           ;	Brown-out Reset Enable
   926                           ;	BOREN = ON, Brown-out Reset enabled
   927                           ;	Clock Out Enable
   928                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
   929                           ;	Internal/External Switchover
   930                           ;	IESO = ON, Internal/External Switchover mode is enabled
   931                           ;	Fail-Safe Clock Monitor Enable
   932                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
   933     8007                     	org	32775
   934     8007  3FFC               	dw	16380
   935                           
   936                           ;Config register CONFIG2 @ 0x8008
   937                           ;	Flash Memory Self-Write Protection
   938                           ;	WRT = OFF, Write protection off
   939                           ;	PLL Enable
   940                           ;	PLLEN = ON, 4x PLL enabled
   941                           ;	Stack Overflow/Underflow Reset Enable
   942                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
   943                           ;	Brown-out Reset Voltage Selection
   944                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
   945                           ;	Low-Voltage Programming Enable
   946                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
   947     8008                     	org	32776
   948     8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         7
    Persistent  33
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      14
    BANK0            80      0       5
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_delayWithWDT

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     198
                        _ADC_Lecture
                       _delayWithWDT
 ---------------------------------------------------------------------------------
 (1) _delayWithWDT                                         5     3      2     198
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Lecture                                          2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Lecture
   _delayWithWDT

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      13       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       5       6        6.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      13      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Jul 29 16:37:11 2025

                     l62 073D                       l65 074D                       l73 0788  
                     l66 0741                       l74 07C1                       l59 0735  
                     l68 0757                       u90 0739                       u91 0738  
                    l801 0761                      l811 0770                      l803 0764  
                    l821 077F                      l813 0773                      l805 0765  
                    l831 079A                      l823 0781                      l815 0775  
                    l807 0767                      l841 07AB                      l833 079C  
                    l825 0790                      l817 0777                      l809 0769  
                    l851 07BF                      l843 07AF                      l835 079E  
                    l827 0793                      l819 0779                      l781 0733  
                    l861 07DA                      l853 07CA                      l845 07B5  
                    l837 07A3                      l829 0794                      l783 0739  
                    l855 07CC                      l847 07B6                      l839 07A5  
                    l791 0758                      l777 072D                      l857 07D1  
                    l849 07BD                      l793 075B                      l779 072F  
                    l787 073E                      l859 07D3                      l795 075D  
                    l789 0742                      l797 075E                      l799 075F  
                    u100 0757                      u101 0756                      u110 079A  
                    u111 0799                      u120 07AB                      u105 0753  
                    u121 07AA                      u130 07B5                      u131 07B4  
                    u140 07BD                      u141 07BC                      u150 07CA  
                    u151 07C9                      u160 07D1                      u161 07D0  
                    u177 0745                      u187 0730                      wreg 0009  
                   _LATA 010C                     _PIE1 0091                     _PIR1 0011  
                   _main 0758                     btemp 007E                     start 0002  
   __end_of_delayWithWDT 0758                    ?_main 0077                    _TRISA 008C  
                  status 0003                    wtemp0 007E          __initialization 07DE  
           __end_of_main 07DE                   ??_main 007C            _counter_Reset 0070  
                 _ADRESH 009C                   _ADRESL 009B                   _INTCON 000B  
                 _OSCCON 0099             __pdataCOMMON 007C  __end_of__initialization 07FD  
          _voltage_rised 0075           __pcstackCOMMON 0077             __pidataBANK0 0729  
         _OPTION_REGbits 0095             _delayWithWDT 073E               __pmaintext 0758  
          ??_ADC_Lecture 0079                  __ptext1 073E                  __ptext2 072D  
   end_of_initialization 07FD      __end_of_ADC_Lecture 073E       delayWithWDT@cycles 0077  
             _threshold3 007D               _threshold4 007C                _TRISAbits 008C  
          delayWithWDT@i 007A            __pidataCOMMON 0727      start_initialization 07DE  
            _ADC_Lecture 072D              __pdataBANK0 0020              __pbssCOMMON 0070  
              ___latbits 0001             _currentState 0074                __pnvBANK0 0024  
              _limit_ADC 0022                 _LATAbits 010C               _ADCON0bits 009D  
             _ADCON1bits 009E              _counter_ADC 0072               _APFCONbits 011D  
               _adc_char 0076               _ANSELAbits 018C             ?_ADC_Lecture 0077  
            _limit_Reset 0020            ?_delayWithWDT 0077                 _last_adc 0024  
         ??_delayWithWDT 0079               _OSCCONbits 0099  
